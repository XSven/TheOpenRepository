#!/usr/bin/perl

# Unit testing for PPI, generated by Test::Inline

use strict;
use File::Spec::Functions ':ALL';
BEGIN {
	$|  = 1;
	$^W = 1;
	$PPI::XS_DISABLE = 1;
	$PPI::XS_DISABLE = 1; # Prevent warning
}
use PPI;

# Execute the tests
use Test::More tests => 22;

# =begin testing module_version 9
{
my $document = PPI::Document->new(\<<'END_PERL');
use Integer::Version 1;
use Float::Version 1.5;
use Version::With::Argument 1 2;
use No::Version;
use No::Version::With::Argument 'x';
use No::Version::With::Arguments 1, 2;
use 5.005;
END_PERL

isa_ok( $document, 'PPI::Document' );
my $statements = $document->find('PPI::Statement::Include');
is( scalar @{$statements}, 7, 'Found expected include statements.' );
is( $statements->[0]->module_version(), 1, 'Integer version' );
is( $statements->[1]->module_version(), 1.5, 'Float version' );
is( $statements->[2]->module_version(), 1, 'Version and argument' );
is( $statements->[3]->module_version(), undef, 'No version, no arguments' );
is( $statements->[4]->module_version(), undef, 'No version, with argument' );
is( $statements->[5]->module_version(), undef, 'No version, with arguments' );
is( $statements->[6]->module_version(), undef, 'Version include, no module' );
}



# =begin testing version 13
{
my $document = PPI::Document->new(\<<'END_PERL');
# Examples from perlfunc in 5.10.
use v5.6.1;
use 5.6.1;
use 5.006_001;
use 5.006; use 5.6.1;

# Same, but using require.
require v5.6.1;
require 5.6.1;
require 5.006_001;
require 5.006; require 5.6.1;

# Module.
use Float::Version 1.5;
END_PERL

isa_ok( $document, 'PPI::Document' );
my $statements = $document->find('PPI::Statement::Include');
is( scalar @{$statements}, 11, 'Found expected include statements.' );

is( $statements->[0]->version(), 'v5.6.1', 'use v-string' );
is( $statements->[1]->version(), '5.6.1', 'use v-string, no leading "v"' );
is( $statements->[2]->version(), '5.006_001', 'use developer release' );
is( $statements->[3]->version(), '5.006', 'use back-compatible version, followed by...' );
is( $statements->[4]->version(), '5.6.1', '... use v-string, no leading "v"' );

is( $statements->[5]->version(), 'v5.6.1', 'require v-string' );
is( $statements->[6]->version(), '5.6.1', 'require v-string, no leading "v"' );
is( $statements->[7]->version(), '5.006_001', 'require developer release' );
is( $statements->[8]->version(), '5.006', 'require back-compatible version, followed by...' );
is( $statements->[9]->version(), '5.6.1', '... require v-string, no leading "v"' );

is( $statements->[10]->version(), '', 'use module version' );
}


1;
