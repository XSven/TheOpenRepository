=head1 NAME

ORDB::AU::Census2006::BcpCdB21 - ORDB::AU::Census2006 class for the bcp_cd_b21 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB21->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b21'
  print ORDB::AU::Census2006::BcpCdB21->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB21->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB21> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB21->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB21->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b21 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b21> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB21> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB21> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB21->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB21->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB21->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b21 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB21->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB21->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b21 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b21> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b21 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b21 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b3509 REAL NOT NULL,
      b3510 REAL NOT NULL,
      b3511 REAL NOT NULL,
      b3512 REAL NOT NULL,
      b3513 REAL NOT NULL,
      b3514 REAL NOT NULL,
      b3515 REAL NOT NULL,
      b3516 REAL NOT NULL,
      b3517 REAL NOT NULL,
      b3518 REAL NOT NULL,
      b3519 REAL NOT NULL,
      b3520 REAL NOT NULL,
      b3521 REAL NOT NULL,
      b3522 REAL NOT NULL,
      b3523 REAL NOT NULL,
      b3524 REAL NOT NULL,
      b3525 REAL NOT NULL,
      b3526 REAL NOT NULL,
      b3527 REAL NOT NULL,
      b3528 REAL NOT NULL,
      b3529 REAL NOT NULL,
      b3530 REAL NOT NULL,
      b3531 REAL NOT NULL,
      b3532 REAL NOT NULL,
      b3533 REAL NOT NULL,
      b3534 REAL NOT NULL,
      b3535 REAL NOT NULL,
      b3536 REAL NOT NULL,
      b3537 REAL NOT NULL,
      b3538 REAL NOT NULL,
      b3539 REAL NOT NULL,
      b3540 REAL NOT NULL,
      b3541 REAL NOT NULL,
      b3542 REAL NOT NULL,
      b3543 REAL NOT NULL,
      b3544 REAL NOT NULL,
      b3545 REAL NOT NULL,
      b3546 REAL NOT NULL,
      b3547 REAL NOT NULL,
      b3548 REAL NOT NULL,
      b3549 REAL NOT NULL,
      b3550 REAL NOT NULL,
      b3551 REAL NOT NULL,
      b3552 REAL NOT NULL,
      b3553 REAL NOT NULL,
      b3554 REAL NOT NULL,
      b3555 REAL NOT NULL,
      b3556 REAL NOT NULL,
      b3557 REAL NOT NULL,
      b3558 REAL NOT NULL,
      b3559 REAL NOT NULL,
      b3560 REAL NOT NULL,
      b3561 REAL NOT NULL,
      b3562 REAL NOT NULL,
      b3563 REAL NOT NULL,
      b3564 REAL NOT NULL,
      b3565 REAL NOT NULL,
      b3566 REAL NOT NULL,
      b3567 REAL NOT NULL,
      b3568 REAL NOT NULL,
      b3569 REAL NOT NULL,
      b3570 REAL NOT NULL,
      b3571 REAL NOT NULL,
      b3572 REAL NOT NULL,
      b3573 REAL NOT NULL,
      b3574 REAL NOT NULL,
      b3575 REAL NOT NULL,
      b3576 REAL NOT NULL,
      b3577 REAL NOT NULL,
      b3578 REAL NOT NULL,
      b3579 REAL NOT NULL,
      b3580 REAL NOT NULL,
      b3581 REAL NOT NULL,
      b3582 REAL NOT NULL,
      b3583 REAL NOT NULL,
      b3584 REAL NOT NULL,
      b3585 REAL NOT NULL,
      b3586 REAL NOT NULL,
      b3587 REAL NOT NULL,
      b3588 REAL NOT NULL,
      b3589 REAL NOT NULL,
      b3590 REAL NOT NULL,
      b3591 REAL NOT NULL,
      b3592 REAL NOT NULL,
      b3593 REAL NOT NULL,
      b3594 REAL NOT NULL,
      b3595 REAL NOT NULL,
      b3596 REAL NOT NULL,
      b3597 REAL NOT NULL,
      b3598 REAL NOT NULL,
      b3599 REAL NOT NULL,
      b3600 REAL NOT NULL,
      b3601 REAL NOT NULL,
      b3602 REAL NOT NULL,
      b3603 REAL NOT NULL,
      b3604 REAL NOT NULL,
      b3605 REAL NOT NULL,
      b3606 REAL NOT NULL,
      b3607 REAL NOT NULL,
      b3608 REAL NOT NULL,
      b3609 REAL NOT NULL,
      b3610 REAL NOT NULL,
      b3611 REAL NOT NULL,
      b3612 REAL NOT NULL,
      b3613 REAL NOT NULL,
      b3614 REAL NOT NULL,
      b3615 REAL NOT NULL,
      b3616 REAL NOT NULL,
      b3617 REAL NOT NULL,
      b3618 REAL NOT NULL,
      b3619 REAL NOT NULL,
      b3620 REAL NOT NULL,
      b3621 REAL NOT NULL,
      b3622 REAL NOT NULL,
      b3623 REAL NOT NULL,
      b3624 REAL NOT NULL,
      b3625 REAL NOT NULL,
      b3626 REAL NOT NULL,
      b3627 REAL NOT NULL,
      b3628 REAL NOT NULL,
      b3629 REAL NOT NULL,
      b3630 REAL NOT NULL,
      b3631 REAL NOT NULL,
      b3632 REAL NOT NULL,
      b3633 REAL NOT NULL,
      b3634 REAL NOT NULL,
      b3635 REAL NOT NULL,
      b3636 REAL NOT NULL,
      b3637 REAL NOT NULL,
      b3638 REAL NOT NULL,
      b3639 REAL NOT NULL,
      b3640 REAL NOT NULL,
      b3641 REAL NOT NULL,
      b3642 REAL NOT NULL,
      b3643 REAL NOT NULL,
      b3644 REAL NOT NULL,
      b3645 REAL NOT NULL,
      b3646 REAL NOT NULL,
      b3647 REAL NOT NULL,
      b3648 REAL NOT NULL,
      b3649 REAL NOT NULL,
      b3650 REAL NOT NULL,
      b3651 REAL NOT NULL,
      b3652 REAL NOT NULL,
      b3653 REAL NOT NULL,
      b3654 REAL NOT NULL,
      b3655 REAL NOT NULL,
      b3656 REAL NOT NULL,
      b3657 REAL NOT NULL,
      b3658 REAL NOT NULL,
      b3659 REAL NOT NULL,
      b3660 REAL NOT NULL,
      b3661 REAL NOT NULL,
      b3662 REAL NOT NULL,
      b3663 REAL NOT NULL,
      b3664 REAL NOT NULL,
      b3665 REAL NOT NULL,
      b3666 REAL NOT NULL,
      b3667 REAL NOT NULL,
      b3668 REAL NOT NULL,
      b3669 REAL NOT NULL,
      b3670 REAL NOT NULL,
      b3671 REAL NOT NULL,
      b3672 REAL NOT NULL,
      b3673 REAL NOT NULL,
      b3674 REAL NOT NULL,
      b3675 REAL NOT NULL,
      b3676 REAL NOT NULL,
      b3677 REAL NOT NULL,
      b3678 REAL NOT NULL,
      b3679 REAL NOT NULL,
      b3680 REAL NOT NULL,
      b3681 REAL NOT NULL,
      b3682 REAL NOT NULL,
      b3683 REAL NOT NULL,
      b3684 REAL NOT NULL,
      b3685 REAL NOT NULL,
      b3686 REAL NOT NULL,
      b3687 REAL NOT NULL,
      b3688 REAL NOT NULL,
      b3689 REAL NOT NULL,
      b3690 REAL NOT NULL,
      b3691 REAL NOT NULL,
      b3692 REAL NOT NULL,
      b3693 REAL NOT NULL,
      b3694 REAL NOT NULL,
      b3695 REAL NOT NULL,
      b3696 REAL NOT NULL,
      b3697 REAL NOT NULL,
      b3698 REAL NOT NULL,
      b3699 REAL NOT NULL,
      b3700 REAL NOT NULL,
      b3701 REAL NOT NULL,
      b3702 REAL NOT NULL,
      b3703 REAL NOT NULL,
      b3704 REAL NOT NULL,
      b3705 REAL NOT NULL,
      b3706 REAL NOT NULL,
      b3707 REAL NOT NULL,
      b3708 REAL NOT NULL,
      b3709 REAL NOT NULL,
      b3710 REAL NOT NULL,
      b3711 REAL NOT NULL,
      b3712 REAL NOT NULL,
      b3713 REAL NOT NULL,
      b3714 REAL NOT NULL,
      b3715 REAL NOT NULL,
      b3716 REAL NOT NULL,
      b3717 REAL NOT NULL,
      b3718 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB21 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

