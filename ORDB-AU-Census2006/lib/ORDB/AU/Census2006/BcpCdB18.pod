=head1 NAME

ORDB::AU::Census2006::BcpCdB18 - ORDB::AU::Census2006 class for the bcp_cd_b18 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB18->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b18'
  print ORDB::AU::Census2006::BcpCdB18->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB18->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB18> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB18->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB18->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b18 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b18> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB18> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB18> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB18->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB18->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB18->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b18 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB18->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB18->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b18 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b18> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b18 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b18 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b3059 REAL NOT NULL,
      b3060 REAL NOT NULL,
      b3061 REAL NOT NULL,
      b3062 REAL NOT NULL,
      b3063 REAL NOT NULL,
      b3064 REAL NOT NULL,
      b3065 REAL NOT NULL,
      b3066 REAL NOT NULL,
      b3067 REAL NOT NULL,
      b3068 REAL NOT NULL,
      b3069 REAL NOT NULL,
      b3070 REAL NOT NULL,
      b3071 REAL NOT NULL,
      b3072 REAL NOT NULL,
      b3073 REAL NOT NULL,
      b3074 REAL NOT NULL,
      b3075 REAL NOT NULL,
      b3076 REAL NOT NULL,
      b3077 REAL NOT NULL,
      b3078 REAL NOT NULL,
      b3079 REAL NOT NULL,
      b3080 REAL NOT NULL,
      b3081 REAL NOT NULL,
      b3082 REAL NOT NULL,
      b3083 REAL NOT NULL,
      b3084 REAL NOT NULL,
      b3085 REAL NOT NULL,
      b3086 REAL NOT NULL,
      b3087 REAL NOT NULL,
      b3088 REAL NOT NULL,
      b3089 REAL NOT NULL,
      b3090 REAL NOT NULL,
      b3091 REAL NOT NULL,
      b3092 REAL NOT NULL,
      b3093 REAL NOT NULL,
      b3094 REAL NOT NULL,
      b3095 REAL NOT NULL,
      b3096 REAL NOT NULL,
      b3097 REAL NOT NULL,
      b3098 REAL NOT NULL,
      b3099 REAL NOT NULL,
      b3100 REAL NOT NULL,
      b3101 REAL NOT NULL,
      b3102 REAL NOT NULL,
      b3103 REAL NOT NULL,
      b3104 REAL NOT NULL,
      b3105 REAL NOT NULL,
      b3106 REAL NOT NULL,
      b3107 REAL NOT NULL,
      b3108 REAL NOT NULL,
      b3109 REAL NOT NULL,
      b3110 REAL NOT NULL,
      b3111 REAL NOT NULL,
      b3112 REAL NOT NULL,
      b3113 REAL NOT NULL,
      b3114 REAL NOT NULL,
      b3115 REAL NOT NULL,
      b3116 REAL NOT NULL,
      b3117 REAL NOT NULL,
      b3118 REAL NOT NULL,
      b3119 REAL NOT NULL,
      b3120 REAL NOT NULL,
      b3121 REAL NOT NULL,
      b3122 REAL NOT NULL,
      b3123 REAL NOT NULL,
      b3124 REAL NOT NULL,
      b3125 REAL NOT NULL,
      b3126 REAL NOT NULL,
      b3127 REAL NOT NULL,
      b3128 REAL NOT NULL,
      b3129 REAL NOT NULL,
      b3130 REAL NOT NULL,
      b3131 REAL NOT NULL,
      b3132 REAL NOT NULL,
      b3133 REAL NOT NULL,
      b3134 REAL NOT NULL,
      b3135 REAL NOT NULL,
      b3136 REAL NOT NULL,
      b3137 REAL NOT NULL,
      b3138 REAL NOT NULL,
      b3139 REAL NOT NULL,
      b3140 REAL NOT NULL,
      b3141 REAL NOT NULL,
      b3142 REAL NOT NULL,
      b3143 REAL NOT NULL,
      b3144 REAL NOT NULL,
      b3145 REAL NOT NULL,
      b3146 REAL NOT NULL,
      b3147 REAL NOT NULL,
      b3148 REAL NOT NULL,
      b3149 REAL NOT NULL,
      b3150 REAL NOT NULL,
      b3151 REAL NOT NULL,
      b3152 REAL NOT NULL,
      b3153 REAL NOT NULL,
      b3154 REAL NOT NULL,
      b3155 REAL NOT NULL,
      b3156 REAL NOT NULL,
      b3157 REAL NOT NULL,
      b3158 REAL NOT NULL,
      b3159 REAL NOT NULL,
      b3160 REAL NOT NULL,
      b3161 REAL NOT NULL,
      b3162 REAL NOT NULL,
      b3163 REAL NOT NULL,
      b3164 REAL NOT NULL,
      b3165 REAL NOT NULL,
      b3166 REAL NOT NULL,
      b3167 REAL NOT NULL,
      b3168 REAL NOT NULL,
      b3169 REAL NOT NULL,
      b3170 REAL NOT NULL,
      b3171 REAL NOT NULL,
      b3172 REAL NOT NULL,
      b3173 REAL NOT NULL,
      b3174 REAL NOT NULL,
      b3175 REAL NOT NULL,
      b3176 REAL NOT NULL,
      b3177 REAL NOT NULL,
      b3178 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB18 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

