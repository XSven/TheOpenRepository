=head1 NAME

ORDB::AU::Census2006::BcpCdB06 - ORDB::AU::Census2006 class for the bcp_cd_b06 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB06->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b06'
  print ORDB::AU::Census2006::BcpCdB06->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB06->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB06> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB06->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB06->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b06 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b06> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB06> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB06> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB06->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB06->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB06->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b06 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB06->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB06->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b06 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b06> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b06 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b06 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b743 REAL NOT NULL,
      b744 REAL NOT NULL,
      b745 REAL NOT NULL,
      b746 REAL NOT NULL,
      b747 REAL NOT NULL,
      b748 REAL NOT NULL,
      b749 REAL NOT NULL,
      b750 REAL NOT NULL,
      b751 REAL NOT NULL,
      b752 REAL NOT NULL,
      b753 REAL NOT NULL,
      b754 REAL NOT NULL,
      b755 REAL NOT NULL,
      b756 REAL NOT NULL,
      b757 REAL NOT NULL,
      b758 REAL NOT NULL,
      b759 REAL NOT NULL,
      b760 REAL NOT NULL,
      b761 REAL NOT NULL,
      b762 REAL NOT NULL,
      b763 REAL NOT NULL,
      b764 REAL NOT NULL,
      b765 REAL NOT NULL,
      b766 REAL NOT NULL,
      b767 REAL NOT NULL,
      b768 REAL NOT NULL,
      b769 REAL NOT NULL,
      b770 REAL NOT NULL,
      b771 REAL NOT NULL,
      b772 REAL NOT NULL,
      b773 REAL NOT NULL,
      b774 REAL NOT NULL,
      b775 REAL NOT NULL,
      b776 REAL NOT NULL,
      b777 REAL NOT NULL,
      b778 REAL NOT NULL,
      b779 REAL NOT NULL,
      b780 REAL NOT NULL,
      b781 REAL NOT NULL,
      b782 REAL NOT NULL,
      b783 REAL NOT NULL,
      b784 REAL NOT NULL,
      b785 REAL NOT NULL,
      b786 REAL NOT NULL,
      b787 REAL NOT NULL,
      b788 REAL NOT NULL,
      b789 REAL NOT NULL,
      b790 REAL NOT NULL,
      b791 REAL NOT NULL,
      b792 REAL NOT NULL,
      b793 REAL NOT NULL,
      b794 REAL NOT NULL,
      b795 REAL NOT NULL,
      b796 REAL NOT NULL,
      b797 REAL NOT NULL,
      b798 REAL NOT NULL,
      b799 REAL NOT NULL,
      b800 REAL NOT NULL,
      b801 REAL NOT NULL,
      b802 REAL NOT NULL,
      b803 REAL NOT NULL,
      b804 REAL NOT NULL,
      b805 REAL NOT NULL,
      b806 REAL NOT NULL,
      b807 REAL NOT NULL,
      b808 REAL NOT NULL,
      b809 REAL NOT NULL,
      b810 REAL NOT NULL,
      b811 REAL NOT NULL,
      b812 REAL NOT NULL,
      b813 REAL NOT NULL,
      b814 REAL NOT NULL,
      b815 REAL NOT NULL,
      b816 REAL NOT NULL,
      b817 REAL NOT NULL,
      b818 REAL NOT NULL,
      b819 REAL NOT NULL,
      b820 REAL NOT NULL,
      b821 REAL NOT NULL,
      b822 REAL NOT NULL,
      b823 REAL NOT NULL,
      b824 REAL NOT NULL,
      b825 REAL NOT NULL,
      b826 REAL NOT NULL,
      b827 REAL NOT NULL,
      b828 REAL NOT NULL,
      b829 REAL NOT NULL,
      b830 REAL NOT NULL,
      b831 REAL NOT NULL,
      b832 REAL NOT NULL,
      b833 REAL NOT NULL,
      b834 REAL NOT NULL,
      b835 REAL NOT NULL,
      b836 REAL NOT NULL,
      b837 REAL NOT NULL,
      b838 REAL NOT NULL,
      b839 REAL NOT NULL,
      b840 REAL NOT NULL,
      b841 REAL NOT NULL,
      b842 REAL NOT NULL,
      b843 REAL NOT NULL,
      b844 REAL NOT NULL,
      b845 REAL NOT NULL,
      b846 REAL NOT NULL,
      b847 REAL NOT NULL,
      b848 REAL NOT NULL,
      b849 REAL NOT NULL,
      b850 REAL NOT NULL,
      b851 REAL NOT NULL,
      b852 REAL NOT NULL,
      b853 REAL NOT NULL,
      b854 REAL NOT NULL,
      b855 REAL NOT NULL,
      b856 REAL NOT NULL,
      b857 REAL NOT NULL,
      b858 REAL NOT NULL,
      b859 REAL NOT NULL,
      b860 REAL NOT NULL,
      b861 REAL NOT NULL,
      b862 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB06 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

