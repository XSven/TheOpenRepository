=head1 NAME

ORDB::AU::Census2006::BcpCdB19 - ORDB::AU::Census2006 class for the bcp_cd_b19 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB19->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b19'
  print ORDB::AU::Census2006::BcpCdB19->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB19->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB19> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB19->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB19->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b19 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b19> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB19> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB19> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB19->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB19->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB19->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b19 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB19->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB19->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b19 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b19> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b19 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b19 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b3179 REAL NOT NULL,
      b3180 REAL NOT NULL,
      b3181 REAL NOT NULL,
      b3182 REAL NOT NULL,
      b3183 REAL NOT NULL,
      b3184 REAL NOT NULL,
      b3185 REAL NOT NULL,
      b3186 REAL NOT NULL,
      b3187 REAL NOT NULL,
      b3188 REAL NOT NULL,
      b3189 REAL NOT NULL,
      b3190 REAL NOT NULL,
      b3191 REAL NOT NULL,
      b3192 REAL NOT NULL,
      b3193 REAL NOT NULL,
      b3194 REAL NOT NULL,
      b3195 REAL NOT NULL,
      b3196 REAL NOT NULL,
      b3197 REAL NOT NULL,
      b3198 REAL NOT NULL,
      b3199 REAL NOT NULL,
      b3200 REAL NOT NULL,
      b3201 REAL NOT NULL,
      b3202 REAL NOT NULL,
      b3203 REAL NOT NULL,
      b3204 REAL NOT NULL,
      b3205 REAL NOT NULL,
      b3206 REAL NOT NULL,
      b3207 REAL NOT NULL,
      b3208 REAL NOT NULL,
      b3209 REAL NOT NULL,
      b3210 REAL NOT NULL,
      b3211 REAL NOT NULL,
      b3212 REAL NOT NULL,
      b3213 REAL NOT NULL,
      b3214 REAL NOT NULL,
      b3215 REAL NOT NULL,
      b3216 REAL NOT NULL,
      b3217 REAL NOT NULL,
      b3218 REAL NOT NULL,
      b3219 REAL NOT NULL,
      b3220 REAL NOT NULL,
      b3221 REAL NOT NULL,
      b3222 REAL NOT NULL,
      b3223 REAL NOT NULL,
      b3224 REAL NOT NULL,
      b3225 REAL NOT NULL,
      b3226 REAL NOT NULL,
      b3227 REAL NOT NULL,
      b3228 REAL NOT NULL,
      b3229 REAL NOT NULL,
      b3230 REAL NOT NULL,
      b3231 REAL NOT NULL,
      b3232 REAL NOT NULL,
      b3233 REAL NOT NULL,
      b3234 REAL NOT NULL,
      b3235 REAL NOT NULL,
      b3236 REAL NOT NULL,
      b3237 REAL NOT NULL,
      b3238 REAL NOT NULL,
      b3239 REAL NOT NULL,
      b3240 REAL NOT NULL,
      b3241 REAL NOT NULL,
      b3242 REAL NOT NULL,
      b3243 REAL NOT NULL,
      b3244 REAL NOT NULL,
      b3245 REAL NOT NULL,
      b3246 REAL NOT NULL,
      b3247 REAL NOT NULL,
      b3248 REAL NOT NULL,
      b3249 REAL NOT NULL,
      b3250 REAL NOT NULL,
      b3251 REAL NOT NULL,
      b3252 REAL NOT NULL,
      b3253 REAL NOT NULL,
      b3254 REAL NOT NULL,
      b3255 REAL NOT NULL,
      b3256 REAL NOT NULL,
      b3257 REAL NOT NULL,
      b3258 REAL NOT NULL,
      b3259 REAL NOT NULL,
      b3260 REAL NOT NULL,
      b3261 REAL NOT NULL,
      b3262 REAL NOT NULL,
      b3263 REAL NOT NULL,
      b3264 REAL NOT NULL,
      b3265 REAL NOT NULL,
      b3266 REAL NOT NULL,
      b3267 REAL NOT NULL,
      b3268 REAL NOT NULL,
      b3269 REAL NOT NULL,
      b3270 REAL NOT NULL,
      b3271 REAL NOT NULL,
      b3272 REAL NOT NULL,
      b3273 REAL NOT NULL,
      b3274 REAL NOT NULL,
      b3275 REAL NOT NULL,
      b3276 REAL NOT NULL,
      b3277 REAL NOT NULL,
      b3278 REAL NOT NULL,
      b3279 REAL NOT NULL,
      b3280 REAL NOT NULL,
      b3281 REAL NOT NULL,
      b3282 REAL NOT NULL,
      b3283 REAL NOT NULL,
      b3284 REAL NOT NULL,
      b3285 REAL NOT NULL,
      b3286 REAL NOT NULL,
      b3287 REAL NOT NULL,
      b3288 REAL NOT NULL,
      b3289 REAL NOT NULL,
      b3290 REAL NOT NULL,
      b3291 REAL NOT NULL,
      b3292 REAL NOT NULL,
      b3293 REAL NOT NULL,
      b3294 REAL NOT NULL,
      b3295 REAL NOT NULL,
      b3296 REAL NOT NULL,
      b3297 REAL NOT NULL,
      b3298 REAL NOT NULL,
      b3299 REAL NOT NULL,
      b3300 REAL NOT NULL,
      b3301 REAL NOT NULL,
      b3302 REAL NOT NULL,
      b3303 REAL NOT NULL,
      b3304 REAL NOT NULL,
      b3305 REAL NOT NULL,
      b3306 REAL NOT NULL,
      b3307 REAL NOT NULL,
      b3308 REAL NOT NULL,
      b3309 REAL NOT NULL,
      b3310 REAL NOT NULL,
      b3311 REAL NOT NULL,
      b3312 REAL NOT NULL,
      b3313 REAL NOT NULL,
      b3314 REAL NOT NULL,
      b3315 REAL NOT NULL,
      b3316 REAL NOT NULL,
      b3317 REAL NOT NULL,
      b3318 REAL NOT NULL,
      b3319 REAL NOT NULL,
      b3320 REAL NOT NULL,
      b3321 REAL NOT NULL,
      b3322 REAL NOT NULL,
      b3323 REAL NOT NULL,
      b3324 REAL NOT NULL,
      b3325 REAL NOT NULL,
      b3326 REAL NOT NULL,
      b3327 REAL NOT NULL,
      b3328 REAL NOT NULL,
      b3329 REAL NOT NULL,
      b3330 REAL NOT NULL,
      b3331 REAL NOT NULL,
      b3332 REAL NOT NULL,
      b3333 REAL NOT NULL,
      b3334 REAL NOT NULL,
      b3335 REAL NOT NULL,
      b3336 REAL NOT NULL,
      b3337 REAL NOT NULL,
      b3338 REAL NOT NULL,
      b3339 REAL NOT NULL,
      b3340 REAL NOT NULL,
      b3341 REAL NOT NULL,
      b3342 REAL NOT NULL,
      b3343 REAL NOT NULL,
      b3344 REAL NOT NULL,
      b3345 REAL NOT NULL,
      b3346 REAL NOT NULL,
      b3347 REAL NOT NULL,
      b3348 REAL NOT NULL,
      b3349 REAL NOT NULL,
      b3350 REAL NOT NULL,
      b3351 REAL NOT NULL,
      b3352 REAL NOT NULL,
      b3353 REAL NOT NULL,
      b3354 REAL NOT NULL,
      b3355 REAL NOT NULL,
      b3356 REAL NOT NULL,
      b3357 REAL NOT NULL,
      b3358 REAL NOT NULL,
      b3359 REAL NOT NULL,
      b3360 REAL NOT NULL,
      b3361 REAL NOT NULL,
      b3362 REAL NOT NULL,
      b3363 REAL NOT NULL,
      b3364 REAL NOT NULL,
      b3365 REAL NOT NULL,
      b3366 REAL NOT NULL,
      b3367 REAL NOT NULL,
      b3368 REAL NOT NULL,
      b3369 REAL NOT NULL,
      b3370 REAL NOT NULL,
      b3371 REAL NOT NULL,
      b3372 REAL NOT NULL,
      b3373 REAL NOT NULL,
      b3374 REAL NOT NULL,
      b3375 REAL NOT NULL,
      b3376 REAL NOT NULL,
      b3377 REAL NOT NULL,
      b3378 REAL NOT NULL,
      b3379 REAL NOT NULL,
      b3380 REAL NOT NULL,
      b3381 REAL NOT NULL,
      b3382 REAL NOT NULL,
      b3383 REAL NOT NULL,
      b3384 REAL NOT NULL,
      b3385 REAL NOT NULL,
      b3386 REAL NOT NULL,
      b3387 REAL NOT NULL,
      b3388 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB19 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

