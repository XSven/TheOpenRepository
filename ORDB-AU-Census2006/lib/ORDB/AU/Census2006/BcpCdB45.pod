=head1 NAME

ORDB::AU::Census2006::BcpCdB45 - ORDB::AU::Census2006 class for the bcp_cd_b45 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB45->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b45'
  print ORDB::AU::Census2006::BcpCdB45->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB45->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB45> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB45->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB45->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b45 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b45> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB45> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB45> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB45->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB45->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB45->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b45 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB45->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB45->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b45 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b45> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b45 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b45 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b7163 REAL NOT NULL,
      b7164 REAL NOT NULL,
      b7165 REAL NOT NULL,
      b7166 REAL NOT NULL,
      b7167 REAL NOT NULL,
      b7168 REAL NOT NULL,
      b7169 REAL NOT NULL,
      b7170 REAL NOT NULL,
      b7171 REAL NOT NULL,
      b7172 REAL NOT NULL,
      b7173 REAL NOT NULL,
      b7174 REAL NOT NULL,
      b7175 REAL NOT NULL,
      b7176 REAL NOT NULL,
      b7177 REAL NOT NULL,
      b7178 REAL NOT NULL,
      b7179 REAL NOT NULL,
      b7180 REAL NOT NULL,
      b7181 REAL NOT NULL,
      b7182 REAL NOT NULL,
      b7183 REAL NOT NULL,
      b7184 REAL NOT NULL,
      b7185 REAL NOT NULL,
      b7186 REAL NOT NULL,
      b7187 REAL NOT NULL,
      b7188 REAL NOT NULL,
      b7189 REAL NOT NULL,
      b7190 REAL NOT NULL,
      b7191 REAL NOT NULL,
      b7192 REAL NOT NULL,
      b7193 REAL NOT NULL,
      b7194 REAL NOT NULL,
      b7195 REAL NOT NULL,
      b7196 REAL NOT NULL,
      b7197 REAL NOT NULL,
      b7198 REAL NOT NULL,
      b7199 REAL NOT NULL,
      b7200 REAL NOT NULL,
      b7201 REAL NOT NULL,
      b7202 REAL NOT NULL,
      b7203 REAL NOT NULL,
      b7204 REAL NOT NULL,
      b7205 REAL NOT NULL,
      b7206 REAL NOT NULL,
      b7207 REAL NOT NULL,
      b7208 REAL NOT NULL,
      b7209 REAL NOT NULL,
      b7210 REAL NOT NULL,
      b7211 REAL NOT NULL,
      b7212 REAL NOT NULL,
      b7213 REAL NOT NULL,
      b7214 REAL NOT NULL,
      b7215 REAL NOT NULL,
      b7216 REAL NOT NULL,
      b7217 REAL NOT NULL,
      b7218 REAL NOT NULL,
      b7219 REAL NOT NULL,
      b7220 REAL NOT NULL,
      b7221 REAL NOT NULL,
      b7222 REAL NOT NULL,
      b7223 REAL NOT NULL,
      b7224 REAL NOT NULL,
      b7225 REAL NOT NULL,
      b7226 REAL NOT NULL,
      b7227 REAL NOT NULL,
      b7228 REAL NOT NULL,
      b7229 REAL NOT NULL,
      b7230 REAL NOT NULL,
      b7231 REAL NOT NULL,
      b7232 REAL NOT NULL,
      b7233 REAL NOT NULL,
      b7234 REAL NOT NULL,
      b7235 REAL NOT NULL,
      b7236 REAL NOT NULL,
      b7237 REAL NOT NULL,
      b7238 REAL NOT NULL,
      b7239 REAL NOT NULL,
      b7240 REAL NOT NULL,
      b7241 REAL NOT NULL,
      b7242 REAL NOT NULL,
      b7243 REAL NOT NULL,
      b7244 REAL NOT NULL,
      b7245 REAL NOT NULL,
      b7246 REAL NOT NULL,
      b7247 REAL NOT NULL,
      b7248 REAL NOT NULL,
      b7249 REAL NOT NULL,
      b7250 REAL NOT NULL,
      b7251 REAL NOT NULL,
      b7252 REAL NOT NULL,
      b7253 REAL NOT NULL,
      b7254 REAL NOT NULL,
      b7255 REAL NOT NULL,
      b7256 REAL NOT NULL,
      b7257 REAL NOT NULL,
      b7258 REAL NOT NULL,
      b7259 REAL NOT NULL,
      b7260 REAL NOT NULL,
      b7261 REAL NOT NULL,
      b7262 REAL NOT NULL,
      b7263 REAL NOT NULL,
      b7264 REAL NOT NULL,
      b7265 REAL NOT NULL,
      b7266 REAL NOT NULL,
      b7267 REAL NOT NULL,
      b7268 REAL NOT NULL,
      b7269 REAL NOT NULL,
      b7270 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB45 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

