=head1 NAME

ORDB::AU::Census2006::BcpCdB33 - ORDB::AU::Census2006 class for the bcp_cd_b33 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB33->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b33'
  print ORDB::AU::Census2006::BcpCdB33->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB33->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB33> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB33->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB33->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b33 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b33> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB33> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB33> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB33->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB33->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB33->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b33 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB33->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB33->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b33 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b33> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b33 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b33 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b4598 REAL NOT NULL,
      b4599 REAL NOT NULL,
      b4600 REAL NOT NULL,
      b4601 REAL NOT NULL,
      b4602 REAL NOT NULL,
      b4603 REAL NOT NULL,
      b4604 REAL NOT NULL,
      b4605 REAL NOT NULL,
      b4606 REAL NOT NULL,
      b4607 REAL NOT NULL,
      b4608 REAL NOT NULL,
      b4609 REAL NOT NULL,
      b4610 REAL NOT NULL,
      b4611 REAL NOT NULL,
      b4612 REAL NOT NULL,
      b4613 REAL NOT NULL,
      b4614 REAL NOT NULL,
      b4615 REAL NOT NULL,
      b4616 REAL NOT NULL,
      b4617 REAL NOT NULL,
      b4618 REAL NOT NULL,
      b4619 REAL NOT NULL,
      b4620 REAL NOT NULL,
      b4621 REAL NOT NULL,
      b4622 REAL NOT NULL,
      b4623 REAL NOT NULL,
      b4624 REAL NOT NULL,
      b4625 REAL NOT NULL,
      b4626 REAL NOT NULL,
      b4627 REAL NOT NULL,
      b4628 REAL NOT NULL,
      b4629 REAL NOT NULL,
      b4630 REAL NOT NULL,
      b4631 REAL NOT NULL,
      b4632 REAL NOT NULL,
      b4633 REAL NOT NULL,
      b4634 REAL NOT NULL,
      b4635 REAL NOT NULL,
      b4636 REAL NOT NULL,
      b4637 REAL NOT NULL,
      b4638 REAL NOT NULL,
      b4639 REAL NOT NULL,
      b4640 REAL NOT NULL,
      b4641 REAL NOT NULL,
      b4642 REAL NOT NULL,
      b4643 REAL NOT NULL,
      b4644 REAL NOT NULL,
      b4645 REAL NOT NULL,
      b4646 REAL NOT NULL,
      b4647 REAL NOT NULL,
      b4648 REAL NOT NULL,
      b4649 REAL NOT NULL,
      b4650 REAL NOT NULL,
      b4651 REAL NOT NULL,
      b4652 REAL NOT NULL,
      b4653 REAL NOT NULL,
      b4654 REAL NOT NULL,
      b4655 REAL NOT NULL,
      b4656 REAL NOT NULL,
      b4657 REAL NOT NULL,
      b4658 REAL NOT NULL,
      b4659 REAL NOT NULL,
      b4660 REAL NOT NULL,
      b4661 REAL NOT NULL,
      b4662 REAL NOT NULL,
      b4663 REAL NOT NULL,
      b4664 REAL NOT NULL,
      b4665 REAL NOT NULL,
      b4666 REAL NOT NULL,
      b4667 REAL NOT NULL,
      b4668 REAL NOT NULL,
      b4669 REAL NOT NULL,
      b4670 REAL NOT NULL,
      b4671 REAL NOT NULL,
      b4672 REAL NOT NULL,
      b4673 REAL NOT NULL,
      b4674 REAL NOT NULL,
      b4675 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB33 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

