=head1 NAME

ORDB::AU::Census2006::BcpCdB23 - ORDB::AU::Census2006 class for the bcp_cd_b23 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB23->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b23'
  print ORDB::AU::Census2006::BcpCdB23->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB23->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB23> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB23->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB23->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b23 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b23> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB23> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB23> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB23->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB23->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB23->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b23 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB23->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB23->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b23 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b23> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b23 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b23 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b4079 REAL NOT NULL,
      b4080 REAL NOT NULL,
      b4081 REAL NOT NULL,
      b4082 REAL NOT NULL,
      b4083 REAL NOT NULL,
      b4084 REAL NOT NULL,
      b4085 REAL NOT NULL,
      b4086 REAL NOT NULL,
      b4087 REAL NOT NULL,
      b4088 REAL NOT NULL,
      b4089 REAL NOT NULL,
      b4090 REAL NOT NULL,
      b4091 REAL NOT NULL,
      b4092 REAL NOT NULL,
      b4093 REAL NOT NULL,
      b4094 REAL NOT NULL,
      b4095 REAL NOT NULL,
      b4096 REAL NOT NULL,
      b4097 REAL NOT NULL,
      b4098 REAL NOT NULL,
      b4099 REAL NOT NULL,
      b4100 REAL NOT NULL,
      b4101 REAL NOT NULL,
      b4102 REAL NOT NULL,
      b4103 REAL NOT NULL,
      b4104 REAL NOT NULL,
      b4105 REAL NOT NULL,
      b4106 REAL NOT NULL,
      b4107 REAL NOT NULL,
      b4108 REAL NOT NULL,
      b4109 REAL NOT NULL,
      b4110 REAL NOT NULL,
      b4111 REAL NOT NULL,
      b4112 REAL NOT NULL,
      b4113 REAL NOT NULL,
      b4114 REAL NOT NULL,
      b4115 REAL NOT NULL,
      b4116 REAL NOT NULL,
      b4117 REAL NOT NULL,
      b4118 REAL NOT NULL,
      b4119 REAL NOT NULL,
      b4120 REAL NOT NULL,
      b4121 REAL NOT NULL,
      b4122 REAL NOT NULL,
      b4123 REAL NOT NULL,
      b4124 REAL NOT NULL,
      b4125 REAL NOT NULL,
      b4126 REAL NOT NULL,
      b4127 REAL NOT NULL,
      b4128 REAL NOT NULL,
      b4129 REAL NOT NULL,
      b4130 REAL NOT NULL,
      b4131 REAL NOT NULL,
      b4132 REAL NOT NULL,
      b4133 REAL NOT NULL,
      b4134 REAL NOT NULL,
      b4135 REAL NOT NULL,
      b4136 REAL NOT NULL,
      b4137 REAL NOT NULL,
      b4138 REAL NOT NULL,
      b4139 REAL NOT NULL,
      b4140 REAL NOT NULL,
      b4141 REAL NOT NULL,
      b4142 REAL NOT NULL,
      b4143 REAL NOT NULL,
      b4144 REAL NOT NULL,
      b4145 REAL NOT NULL,
      b4146 REAL NOT NULL,
      b4147 REAL NOT NULL,
      b4148 REAL NOT NULL,
      b4149 REAL NOT NULL,
      b4150 REAL NOT NULL,
      b4151 REAL NOT NULL,
      b4152 REAL NOT NULL,
      b4153 REAL NOT NULL,
      b4154 REAL NOT NULL,
      b4155 REAL NOT NULL,
      b4156 REAL NOT NULL,
      b4157 REAL NOT NULL,
      b4158 REAL NOT NULL,
      b4159 REAL NOT NULL,
      b4160 REAL NOT NULL,
      b4161 REAL NOT NULL,
      b4162 REAL NOT NULL,
      b4163 REAL NOT NULL,
      b4164 REAL NOT NULL,
      b4165 REAL NOT NULL,
      b4166 REAL NOT NULL,
      b4167 REAL NOT NULL,
      b4168 REAL NOT NULL,
      b4169 REAL NOT NULL,
      b4170 REAL NOT NULL,
      b4171 REAL NOT NULL,
      b4172 REAL NOT NULL,
      b4173 REAL NOT NULL,
      b4174 REAL NOT NULL,
      b4175 REAL NOT NULL,
      b4176 REAL NOT NULL,
      b4177 REAL NOT NULL,
      b4178 REAL NOT NULL,
      b4179 REAL NOT NULL,
      b4180 REAL NOT NULL,
      b4181 REAL NOT NULL,
      b4182 REAL NOT NULL,
      b4183 REAL NOT NULL,
      b4184 REAL NOT NULL,
      b4185 REAL NOT NULL,
      b4186 REAL NOT NULL,
      b4187 REAL NOT NULL,
      b4188 REAL NOT NULL,
      b4189 REAL NOT NULL,
      b4190 REAL NOT NULL,
      b4191 REAL NOT NULL,
      b4192 REAL NOT NULL,
      b4193 REAL NOT NULL,
      b4194 REAL NOT NULL,
      b4195 REAL NOT NULL,
      b4196 REAL NOT NULL,
      b4197 REAL NOT NULL,
      b4198 REAL NOT NULL,
      b4199 REAL NOT NULL,
      b4200 REAL NOT NULL,
      b4201 REAL NOT NULL,
      b4202 REAL NOT NULL,
      b4203 REAL NOT NULL,
      b4204 REAL NOT NULL,
      b4205 REAL NOT NULL,
      b4206 REAL NOT NULL,
      b4207 REAL NOT NULL,
      b4208 REAL NOT NULL,
      b4209 REAL NOT NULL,
      b4210 REAL NOT NULL,
      b4211 REAL NOT NULL,
      b4212 REAL NOT NULL,
      b4213 REAL NOT NULL,
      b4214 REAL NOT NULL,
      b4215 REAL NOT NULL,
      b4216 REAL NOT NULL,
      b4217 REAL NOT NULL,
      b4218 REAL NOT NULL,
      b4219 REAL NOT NULL,
      b4220 REAL NOT NULL,
      b4221 REAL NOT NULL,
      b4222 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB23 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

