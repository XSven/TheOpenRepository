=head1 NAME

ORDB::AU::Census2006::BcpCdB40 - ORDB::AU::Census2006 class for the bcp_cd_b40 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB40->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b40'
  print ORDB::AU::Census2006::BcpCdB40->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB40->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB40> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB40->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB40->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b40 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b40> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB40> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB40> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB40->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB40->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB40->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b40 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB40->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB40->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b40 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b40> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b40 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b40 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b5258 REAL NOT NULL,
      b5259 REAL NOT NULL,
      b5260 REAL NOT NULL,
      b5261 REAL NOT NULL,
      b5262 REAL NOT NULL,
      b5263 REAL NOT NULL,
      b5264 REAL NOT NULL,
      b5265 REAL NOT NULL,
      b5266 REAL NOT NULL,
      b5267 REAL NOT NULL,
      b5268 REAL NOT NULL,
      b5269 REAL NOT NULL,
      b5270 REAL NOT NULL,
      b5271 REAL NOT NULL,
      b5272 REAL NOT NULL,
      b5273 REAL NOT NULL,
      b5274 REAL NOT NULL,
      b5275 REAL NOT NULL,
      b5276 REAL NOT NULL,
      b5277 REAL NOT NULL,
      b5278 REAL NOT NULL,
      b5279 REAL NOT NULL,
      b5280 REAL NOT NULL,
      b5281 REAL NOT NULL,
      b5282 REAL NOT NULL,
      b5283 REAL NOT NULL,
      b5284 REAL NOT NULL,
      b5285 REAL NOT NULL,
      b5286 REAL NOT NULL,
      b5287 REAL NOT NULL,
      b5288 REAL NOT NULL,
      b5289 REAL NOT NULL,
      b5290 REAL NOT NULL,
      b5291 REAL NOT NULL,
      b5292 REAL NOT NULL,
      b5293 REAL NOT NULL,
      b5294 REAL NOT NULL,
      b5295 REAL NOT NULL,
      b5296 REAL NOT NULL,
      b5297 REAL NOT NULL,
      b5298 REAL NOT NULL,
      b5299 REAL NOT NULL,
      b5300 REAL NOT NULL,
      b5301 REAL NOT NULL,
      b5302 REAL NOT NULL,
      b5303 REAL NOT NULL,
      b5304 REAL NOT NULL,
      b5305 REAL NOT NULL,
      b5306 REAL NOT NULL,
      b5307 REAL NOT NULL,
      b5308 REAL NOT NULL,
      b5309 REAL NOT NULL,
      b5310 REAL NOT NULL,
      b5311 REAL NOT NULL,
      b5312 REAL NOT NULL,
      b5313 REAL NOT NULL,
      b5314 REAL NOT NULL,
      b5315 REAL NOT NULL,
      b5316 REAL NOT NULL,
      b5317 REAL NOT NULL,
      b5318 REAL NOT NULL,
      b5319 REAL NOT NULL,
      b5320 REAL NOT NULL,
      b5321 REAL NOT NULL,
      b5322 REAL NOT NULL,
      b5323 REAL NOT NULL,
      b5324 REAL NOT NULL,
      b5325 REAL NOT NULL,
      b5326 REAL NOT NULL,
      b5327 REAL NOT NULL,
      b5328 REAL NOT NULL,
      b5329 REAL NOT NULL,
      b5330 REAL NOT NULL,
      b5331 REAL NOT NULL,
      b5332 REAL NOT NULL,
      b5333 REAL NOT NULL,
      b5334 REAL NOT NULL,
      b5335 REAL NOT NULL,
      b5336 REAL NOT NULL,
      b5337 REAL NOT NULL,
      b5338 REAL NOT NULL,
      b5339 REAL NOT NULL,
      b5340 REAL NOT NULL,
      b5341 REAL NOT NULL,
      b5342 REAL NOT NULL,
      b5343 REAL NOT NULL,
      b5344 REAL NOT NULL,
      b5345 REAL NOT NULL,
      b5346 REAL NOT NULL,
      b5347 REAL NOT NULL,
      b5348 REAL NOT NULL,
      b5349 REAL NOT NULL,
      b5350 REAL NOT NULL,
      b5351 REAL NOT NULL,
      b5352 REAL NOT NULL,
      b5353 REAL NOT NULL,
      b5354 REAL NOT NULL,
      b5355 REAL NOT NULL,
      b5356 REAL NOT NULL,
      b5357 REAL NOT NULL,
      b5358 REAL NOT NULL,
      b5359 REAL NOT NULL,
      b5360 REAL NOT NULL,
      b5361 REAL NOT NULL,
      b5362 REAL NOT NULL,
      b5363 REAL NOT NULL,
      b5364 REAL NOT NULL,
      b5365 REAL NOT NULL,
      b5366 REAL NOT NULL,
      b5367 REAL NOT NULL,
      b5368 REAL NOT NULL,
      b5369 REAL NOT NULL,
      b5370 REAL NOT NULL,
      b5371 REAL NOT NULL,
      b5372 REAL NOT NULL,
      b5373 REAL NOT NULL,
      b5374 REAL NOT NULL,
      b5375 REAL NOT NULL,
      b5376 REAL NOT NULL,
      b5377 REAL NOT NULL,
      b5378 REAL NOT NULL,
      b5379 REAL NOT NULL,
      b5380 REAL NOT NULL,
      b5381 REAL NOT NULL,
      b5382 REAL NOT NULL,
      b5383 REAL NOT NULL,
      b5384 REAL NOT NULL,
      b5385 REAL NOT NULL,
      b5386 REAL NOT NULL,
      b5387 REAL NOT NULL,
      b5388 REAL NOT NULL,
      b5389 REAL NOT NULL,
      b5390 REAL NOT NULL,
      b5391 REAL NOT NULL,
      b5392 REAL NOT NULL,
      b5393 REAL NOT NULL,
      b5394 REAL NOT NULL,
      b5395 REAL NOT NULL,
      b5396 REAL NOT NULL,
      b5397 REAL NOT NULL,
      b5398 REAL NOT NULL,
      b5399 REAL NOT NULL,
      b5400 REAL NOT NULL,
      b5401 REAL NOT NULL,
      b5402 REAL NOT NULL,
      b5403 REAL NOT NULL,
      b5404 REAL NOT NULL,
      b5405 REAL NOT NULL,
      b5406 REAL NOT NULL,
      b5407 REAL NOT NULL,
      b5408 REAL NOT NULL,
      b5409 REAL NOT NULL,
      b5410 REAL NOT NULL,
      b5411 REAL NOT NULL,
      b5412 REAL NOT NULL,
      b5413 REAL NOT NULL,
      b5414 REAL NOT NULL,
      b5415 REAL NOT NULL,
      b5416 REAL NOT NULL,
      b5417 REAL NOT NULL,
      b5418 REAL NOT NULL,
      b5419 REAL NOT NULL,
      b5420 REAL NOT NULL,
      b5421 REAL NOT NULL,
      b5422 REAL NOT NULL,
      b5423 REAL NOT NULL,
      b5424 REAL NOT NULL,
      b5425 REAL NOT NULL,
      b5426 REAL NOT NULL,
      b5427 REAL NOT NULL,
      b5428 REAL NOT NULL,
      b5429 REAL NOT NULL,
      b5430 REAL NOT NULL,
      b5431 REAL NOT NULL,
      b5432 REAL NOT NULL,
      b5433 REAL NOT NULL,
      b5434 REAL NOT NULL,
      b5435 REAL NOT NULL,
      b5436 REAL NOT NULL,
      b5437 REAL NOT NULL,
      b5438 REAL NOT NULL,
      b5439 REAL NOT NULL,
      b5440 REAL NOT NULL,
      b5441 REAL NOT NULL,
      b5442 REAL NOT NULL,
      b5443 REAL NOT NULL,
      b5444 REAL NOT NULL,
      b5445 REAL NOT NULL,
      b5446 REAL NOT NULL,
      b5447 REAL NOT NULL,
      b5448 REAL NOT NULL,
      b5449 REAL NOT NULL,
      b5450 REAL NOT NULL,
      b5451 REAL NOT NULL,
      b5452 REAL NOT NULL,
      b5453 REAL NOT NULL,
      b5454 REAL NOT NULL,
      b5455 REAL NOT NULL,
      b5456 REAL NOT NULL,
      b5457 REAL NOT NULL,
      b5458 REAL NOT NULL,
      b5459 REAL NOT NULL,
      b5460 REAL NOT NULL,
      b5461 REAL NOT NULL,
      b5462 REAL NOT NULL,
      b5463 REAL NOT NULL,
      b5464 REAL NOT NULL,
      b5465 REAL NOT NULL,
      b5466 REAL NOT NULL,
      b5467 REAL NOT NULL,
      b5468 REAL NOT NULL,
      b5469 REAL NOT NULL,
      b5470 REAL NOT NULL,
      b5471 REAL NOT NULL,
      b5472 REAL NOT NULL,
      b5473 REAL NOT NULL,
      b5474 REAL NOT NULL,
      b5475 REAL NOT NULL,
      b5476 REAL NOT NULL,
      b5477 REAL NOT NULL,
      b5478 REAL NOT NULL,
      b5479 REAL NOT NULL,
      b5480 REAL NOT NULL,
      b5481 REAL NOT NULL,
      b5482 REAL NOT NULL,
      b5483 REAL NOT NULL,
      b5484 REAL NOT NULL,
      b5485 REAL NOT NULL,
      b5486 REAL NOT NULL,
      b5487 REAL NOT NULL,
      b5488 REAL NOT NULL,
      b5489 REAL NOT NULL,
      b5490 REAL NOT NULL,
      b5491 REAL NOT NULL,
      b5492 REAL NOT NULL,
      b5493 REAL NOT NULL,
      b5494 REAL NOT NULL,
      b5495 REAL NOT NULL,
      b5496 REAL NOT NULL,
      b5497 REAL NOT NULL,
      b5498 REAL NOT NULL,
      b5499 REAL NOT NULL,
      b5500 REAL NOT NULL,
      b5501 REAL NOT NULL,
      b5502 REAL NOT NULL,
      b5503 REAL NOT NULL,
      b5504 REAL NOT NULL,
      b5505 REAL NOT NULL,
      b5506 REAL NOT NULL,
      b5507 REAL NOT NULL,
      b5508 REAL NOT NULL,
      b5509 REAL NOT NULL,
      b5510 REAL NOT NULL,
      b5511 REAL NOT NULL,
      b5512 REAL NOT NULL,
      b5513 REAL NOT NULL,
      b5514 REAL NOT NULL,
      b5515 REAL NOT NULL,
      b5516 REAL NOT NULL,
      b5517 REAL NOT NULL,
      b5518 REAL NOT NULL,
      b5519 REAL NOT NULL,
      b5520 REAL NOT NULL,
      b5521 REAL NOT NULL,
      b5522 REAL NOT NULL,
      b5523 REAL NOT NULL,
      b5524 REAL NOT NULL,
      b5525 REAL NOT NULL,
      b5526 REAL NOT NULL,
      b5527 REAL NOT NULL,
      b5528 REAL NOT NULL,
      b5529 REAL NOT NULL,
      b5530 REAL NOT NULL,
      b5531 REAL NOT NULL,
      b5532 REAL NOT NULL,
      b5533 REAL NOT NULL,
      b5534 REAL NOT NULL,
      b5535 REAL NOT NULL,
      b5536 REAL NOT NULL,
      b5537 REAL NOT NULL,
      b5538 REAL NOT NULL,
      b5539 REAL NOT NULL,
      b5540 REAL NOT NULL,
      b5541 REAL NOT NULL,
      b5542 REAL NOT NULL,
      b5543 REAL NOT NULL,
      b5544 REAL NOT NULL,
      b5545 REAL NOT NULL,
      b5546 REAL NOT NULL,
      b5547 REAL NOT NULL,
      b5548 REAL NOT NULL,
      b5549 REAL NOT NULL,
      b5550 REAL NOT NULL,
      b5551 REAL NOT NULL,
      b5552 REAL NOT NULL,
      b5553 REAL NOT NULL,
      b5554 REAL NOT NULL,
      b5555 REAL NOT NULL,
      b5556 REAL NOT NULL,
      b5557 REAL NOT NULL,
      b5558 REAL NOT NULL,
      b5559 REAL NOT NULL,
      b5560 REAL NOT NULL,
      b5561 REAL NOT NULL,
      b5562 REAL NOT NULL,
      b5563 REAL NOT NULL,
      b5564 REAL NOT NULL,
      b5565 REAL NOT NULL,
      b5566 REAL NOT NULL,
      b5567 REAL NOT NULL,
      b5568 REAL NOT NULL,
      b5569 REAL NOT NULL,
      b5570 REAL NOT NULL,
      b5571 REAL NOT NULL,
      b5572 REAL NOT NULL,
      b5573 REAL NOT NULL,
      b5574 REAL NOT NULL,
      b5575 REAL NOT NULL,
      b5576 REAL NOT NULL,
      b5577 REAL NOT NULL,
      b5578 REAL NOT NULL,
      b5579 REAL NOT NULL,
      b5580 REAL NOT NULL,
      b5581 REAL NOT NULL,
      b5582 REAL NOT NULL,
      b5583 REAL NOT NULL,
      b5584 REAL NOT NULL,
      b5585 REAL NOT NULL,
      b5586 REAL NOT NULL,
      b5587 REAL NOT NULL,
      b5588 REAL NOT NULL,
      b5589 REAL NOT NULL,
      b5590 REAL NOT NULL,
      b5591 REAL NOT NULL,
      b5592 REAL NOT NULL,
      b5593 REAL NOT NULL,
      b5594 REAL NOT NULL,
      b5595 REAL NOT NULL,
      b5596 REAL NOT NULL,
      b5597 REAL NOT NULL,
      b5598 REAL NOT NULL,
      b5599 REAL NOT NULL,
      b5600 REAL NOT NULL,
      b5601 REAL NOT NULL,
      b5602 REAL NOT NULL,
      b5603 REAL NOT NULL,
      b5604 REAL NOT NULL,
      b5605 REAL NOT NULL,
      b5606 REAL NOT NULL,
      b5607 REAL NOT NULL,
      b5608 REAL NOT NULL,
      b5609 REAL NOT NULL,
      b5610 REAL NOT NULL,
      b5611 REAL NOT NULL,
      b5612 REAL NOT NULL,
      b5613 REAL NOT NULL,
      b5614 REAL NOT NULL,
      b5615 REAL NOT NULL,
      b5616 REAL NOT NULL,
      b5617 REAL NOT NULL,
      b5618 REAL NOT NULL,
      b5619 REAL NOT NULL,
      b5620 REAL NOT NULL,
      b5621 REAL NOT NULL,
      b5622 REAL NOT NULL,
      b5623 REAL NOT NULL,
      b5624 REAL NOT NULL,
      b5625 REAL NOT NULL,
      b5626 REAL NOT NULL,
      b5627 REAL NOT NULL,
      b5628 REAL NOT NULL,
      b5629 REAL NOT NULL,
      b5630 REAL NOT NULL,
      b5631 REAL NOT NULL,
      b5632 REAL NOT NULL,
      b5633 REAL NOT NULL,
      b5634 REAL NOT NULL,
      b5635 REAL NOT NULL,
      b5636 REAL NOT NULL,
      b5637 REAL NOT NULL,
      b5638 REAL NOT NULL,
      b5639 REAL NOT NULL,
      b5640 REAL NOT NULL,
      b5641 REAL NOT NULL,
      b5642 REAL NOT NULL,
      b5643 REAL NOT NULL,
      b5644 REAL NOT NULL,
      b5645 REAL NOT NULL,
      b5646 REAL NOT NULL,
      b5647 REAL NOT NULL,
      b5648 REAL NOT NULL,
      b5649 REAL NOT NULL,
      b5650 REAL NOT NULL,
      b5651 REAL NOT NULL,
      b5652 REAL NOT NULL,
      b5653 REAL NOT NULL,
      b5654 REAL NOT NULL,
      b5655 REAL NOT NULL,
      b5656 REAL NOT NULL,
      b5657 REAL NOT NULL,
      b5658 REAL NOT NULL,
      b5659 REAL NOT NULL,
      b5660 REAL NOT NULL,
      b5661 REAL NOT NULL,
      b5662 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB40 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

