=head1 NAME

ORDB::AU::Census2006::BcpMetaTable - ORDB::AU::Census2006 class for the bcp_meta_table table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpMetaTable->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_meta_table'
  print ORDB::AU::Census2006::BcpMetaTable->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpMetaTable->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpMetaTable->select(
      'where  > ? order by ',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_meta_table table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_meta_table> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpMetaTable> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpMetaTable> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpMetaTable->iterate( sub {
      print $_-> . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpMetaTable->select ) {
      print $_-> . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpMetaTable->iterate(
      'order by ?', '',
      sub {
          print $_-> . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_meta_table order by ',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpMetaTable->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpMetaTable->count(
      'where  > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_meta_table table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_meta_table> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_meta_table table was originally created with the
following SQL command.

  CREATE TABLE bcp_meta_table (
      table_id TEXT NOT NULL,
      title TEXT NOT NULL,
      population TEXT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpMetaTable is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

