=head1 NAME

ORDB::AU::Census2006::BcpCdB16 - ORDB::AU::Census2006 class for the bcp_cd_b16 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB16->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b16'
  print ORDB::AU::Census2006::BcpCdB16->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB16->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB16> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB16->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB16->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b16 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b16> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB16> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB16> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB16->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB16->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB16->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b16 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB16->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB16->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b16 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b16> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b16 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b16 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b2525 REAL NOT NULL,
      b2526 REAL NOT NULL,
      b2527 REAL NOT NULL,
      b2528 REAL NOT NULL,
      b2529 REAL NOT NULL,
      b2530 REAL NOT NULL,
      b2531 REAL NOT NULL,
      b2532 REAL NOT NULL,
      b2533 REAL NOT NULL,
      b2534 REAL NOT NULL,
      b2535 REAL NOT NULL,
      b2536 REAL NOT NULL,
      b2537 REAL NOT NULL,
      b2538 REAL NOT NULL,
      b2539 REAL NOT NULL,
      b2540 REAL NOT NULL,
      b2541 REAL NOT NULL,
      b2542 REAL NOT NULL,
      b2543 REAL NOT NULL,
      b2544 REAL NOT NULL,
      b2545 REAL NOT NULL,
      b2546 REAL NOT NULL,
      b2547 REAL NOT NULL,
      b2548 REAL NOT NULL,
      b2549 REAL NOT NULL,
      b2550 REAL NOT NULL,
      b2551 REAL NOT NULL,
      b2552 REAL NOT NULL,
      b2553 REAL NOT NULL,
      b2554 REAL NOT NULL,
      b2555 REAL NOT NULL,
      b2556 REAL NOT NULL,
      b2557 REAL NOT NULL,
      b2558 REAL NOT NULL,
      b2559 REAL NOT NULL,
      b2560 REAL NOT NULL,
      b2561 REAL NOT NULL,
      b2562 REAL NOT NULL,
      b2563 REAL NOT NULL,
      b2564 REAL NOT NULL,
      b2565 REAL NOT NULL,
      b2566 REAL NOT NULL,
      b2567 REAL NOT NULL,
      b2568 REAL NOT NULL,
      b2569 REAL NOT NULL,
      b2570 REAL NOT NULL,
      b2571 REAL NOT NULL,
      b2572 REAL NOT NULL,
      b2573 REAL NOT NULL,
      b2574 REAL NOT NULL,
      b2575 REAL NOT NULL,
      b2576 REAL NOT NULL,
      b2577 REAL NOT NULL,
      b2578 REAL NOT NULL,
      b2579 REAL NOT NULL,
      b2580 REAL NOT NULL,
      b2581 REAL NOT NULL,
      b2582 REAL NOT NULL,
      b2583 REAL NOT NULL,
      b2584 REAL NOT NULL,
      b2585 REAL NOT NULL,
      b2586 REAL NOT NULL,
      b2587 REAL NOT NULL,
      b2588 REAL NOT NULL,
      b2589 REAL NOT NULL,
      b2590 REAL NOT NULL,
      b2591 REAL NOT NULL,
      b2592 REAL NOT NULL,
      b2593 REAL NOT NULL,
      b2594 REAL NOT NULL,
      b2595 REAL NOT NULL,
      b2596 REAL NOT NULL,
      b2597 REAL NOT NULL,
      b2598 REAL NOT NULL,
      b2599 REAL NOT NULL,
      b2600 REAL NOT NULL,
      b2601 REAL NOT NULL,
      b2602 REAL NOT NULL,
      b2603 REAL NOT NULL,
      b2604 REAL NOT NULL,
      b2605 REAL NOT NULL,
      b2606 REAL NOT NULL,
      b2607 REAL NOT NULL,
      b2608 REAL NOT NULL,
      b2609 REAL NOT NULL,
      b2610 REAL NOT NULL,
      b2611 REAL NOT NULL,
      b2612 REAL NOT NULL,
      b2613 REAL NOT NULL,
      b2614 REAL NOT NULL,
      b2615 REAL NOT NULL,
      b2616 REAL NOT NULL,
      b2617 REAL NOT NULL,
      b2618 REAL NOT NULL,
      b2619 REAL NOT NULL,
      b2620 REAL NOT NULL,
      b2621 REAL NOT NULL,
      b2622 REAL NOT NULL,
      b2623 REAL NOT NULL,
      b2624 REAL NOT NULL,
      b2625 REAL NOT NULL,
      b2626 REAL NOT NULL,
      b2627 REAL NOT NULL,
      b2628 REAL NOT NULL,
      b2629 REAL NOT NULL,
      b2630 REAL NOT NULL,
      b2631 REAL NOT NULL,
      b2632 REAL NOT NULL,
      b2633 REAL NOT NULL,
      b2634 REAL NOT NULL,
      b2635 REAL NOT NULL,
      b2636 REAL NOT NULL,
      b2637 REAL NOT NULL,
      b2638 REAL NOT NULL,
      b2639 REAL NOT NULL,
      b2640 REAL NOT NULL,
      b2641 REAL NOT NULL,
      b2642 REAL NOT NULL,
      b2643 REAL NOT NULL,
      b2644 REAL NOT NULL,
      b2645 REAL NOT NULL,
      b2646 REAL NOT NULL,
      b2647 REAL NOT NULL,
      b2648 REAL NOT NULL,
      b2649 REAL NOT NULL,
      b2650 REAL NOT NULL,
      b2651 REAL NOT NULL,
      b2652 REAL NOT NULL,
      b2653 REAL NOT NULL,
      b2654 REAL NOT NULL,
      b2655 REAL NOT NULL,
      b2656 REAL NOT NULL,
      b2657 REAL NOT NULL,
      b2658 REAL NOT NULL,
      b2659 REAL NOT NULL,
      b2660 REAL NOT NULL,
      b2661 REAL NOT NULL,
      b2662 REAL NOT NULL,
      b2663 REAL NOT NULL,
      b2664 REAL NOT NULL,
      b2665 REAL NOT NULL,
      b2666 REAL NOT NULL,
      b2667 REAL NOT NULL,
      b2668 REAL NOT NULL,
      b2669 REAL NOT NULL,
      b2670 REAL NOT NULL,
      b2671 REAL NOT NULL,
      b2672 REAL NOT NULL,
      b2673 REAL NOT NULL,
      b2674 REAL NOT NULL,
      b2675 REAL NOT NULL,
      b2676 REAL NOT NULL,
      b2677 REAL NOT NULL,
      b2678 REAL NOT NULL,
      b2679 REAL NOT NULL,
      b2680 REAL NOT NULL,
      b2681 REAL NOT NULL,
      b2682 REAL NOT NULL,
      b2683 REAL NOT NULL,
      b2684 REAL NOT NULL,
      b2685 REAL NOT NULL,
      b2686 REAL NOT NULL,
      b2687 REAL NOT NULL,
      b2688 REAL NOT NULL,
      b2689 REAL NOT NULL,
      b2690 REAL NOT NULL,
      b2691 REAL NOT NULL,
      b2692 REAL NOT NULL,
      b2693 REAL NOT NULL,
      b2694 REAL NOT NULL,
      b2695 REAL NOT NULL,
      b2696 REAL NOT NULL,
      b2697 REAL NOT NULL,
      b2698 REAL NOT NULL,
      b2699 REAL NOT NULL,
      b2700 REAL NOT NULL,
      b2701 REAL NOT NULL,
      b2702 REAL NOT NULL,
      b2703 REAL NOT NULL,
      b2704 REAL NOT NULL,
      b2705 REAL NOT NULL,
      b2706 REAL NOT NULL,
      b2707 REAL NOT NULL,
      b2708 REAL NOT NULL,
      b2709 REAL NOT NULL,
      b2710 REAL NOT NULL,
      b2711 REAL NOT NULL,
      b2712 REAL NOT NULL,
      b2713 REAL NOT NULL,
      b2714 REAL NOT NULL,
      b2715 REAL NOT NULL,
      b2716 REAL NOT NULL,
      b2717 REAL NOT NULL,
      b2718 REAL NOT NULL,
      b2719 REAL NOT NULL,
      b2720 REAL NOT NULL,
      b2721 REAL NOT NULL,
      b2722 REAL NOT NULL,
      b2723 REAL NOT NULL,
      b2724 REAL NOT NULL,
      b2725 REAL NOT NULL,
      b2726 REAL NOT NULL,
      b2727 REAL NOT NULL,
      b2728 REAL NOT NULL,
      b2729 REAL NOT NULL,
      b2730 REAL NOT NULL,
      b2731 REAL NOT NULL,
      b2732 REAL NOT NULL,
      b2733 REAL NOT NULL,
      b2734 REAL NOT NULL,
      b2735 REAL NOT NULL,
      b2736 REAL NOT NULL,
      b2737 REAL NOT NULL,
      b2738 REAL NOT NULL,
      b2739 REAL NOT NULL,
      b2740 REAL NOT NULL,
      b2741 REAL NOT NULL,
      b2742 REAL NOT NULL,
      b2743 REAL NOT NULL,
      b2744 REAL NOT NULL,
      b2745 REAL NOT NULL,
      b2746 REAL NOT NULL,
      b2747 REAL NOT NULL,
      b2748 REAL NOT NULL,
      b2749 REAL NOT NULL,
      b2750 REAL NOT NULL,
      b2751 REAL NOT NULL,
      b2752 REAL NOT NULL,
      b2753 REAL NOT NULL,
      b2754 REAL NOT NULL,
      b2755 REAL NOT NULL,
      b2756 REAL NOT NULL,
      b2757 REAL NOT NULL,
      b2758 REAL NOT NULL,
      b2759 REAL NOT NULL,
      b2760 REAL NOT NULL,
      b2761 REAL NOT NULL,
      b2762 REAL NOT NULL,
      b2763 REAL NOT NULL,
      b2764 REAL NOT NULL,
      b2765 REAL NOT NULL,
      b2766 REAL NOT NULL,
      b2767 REAL NOT NULL,
      b2768 REAL NOT NULL,
      b2769 REAL NOT NULL,
      b2770 REAL NOT NULL,
      b2771 REAL NOT NULL,
      b2772 REAL NOT NULL,
      b2773 REAL NOT NULL,
      b2774 REAL NOT NULL,
      b2775 REAL NOT NULL,
      b2776 REAL NOT NULL,
      b2777 REAL NOT NULL,
      b2778 REAL NOT NULL,
      b2779 REAL NOT NULL,
      b2780 REAL NOT NULL,
      b2781 REAL NOT NULL,
      b2782 REAL NOT NULL,
      b2783 REAL NOT NULL,
      b2784 REAL NOT NULL,
      b2785 REAL NOT NULL,
      b2786 REAL NOT NULL,
      b2787 REAL NOT NULL,
      b2788 REAL NOT NULL,
      b2789 REAL NOT NULL,
      b2790 REAL NOT NULL,
      b2791 REAL NOT NULL,
      b2792 REAL NOT NULL,
      b2793 REAL NOT NULL,
      b2794 REAL NOT NULL,
      b2795 REAL NOT NULL,
      b2796 REAL NOT NULL,
      b2797 REAL NOT NULL,
      b2798 REAL NOT NULL,
      b2799 REAL NOT NULL,
      b2800 REAL NOT NULL,
      b2801 REAL NOT NULL,
      b2802 REAL NOT NULL,
      b2803 REAL NOT NULL,
      b2804 REAL NOT NULL,
      b2805 REAL NOT NULL,
      b2806 REAL NOT NULL,
      b2807 REAL NOT NULL,
      b2808 REAL NOT NULL,
      b2809 REAL NOT NULL,
      b2810 REAL NOT NULL,
      b2811 REAL NOT NULL,
      b2812 REAL NOT NULL,
      b2813 REAL NOT NULL,
      b2814 REAL NOT NULL,
      b2815 REAL NOT NULL,
      b2816 REAL NOT NULL,
      b2817 REAL NOT NULL,
      b2818 REAL NOT NULL,
      b2819 REAL NOT NULL,
      b2820 REAL NOT NULL,
      b2821 REAL NOT NULL,
      b2822 REAL NOT NULL,
      b2823 REAL NOT NULL,
      b2824 REAL NOT NULL,
      b2825 REAL NOT NULL,
      b2826 REAL NOT NULL,
      b2827 REAL NOT NULL,
      b2828 REAL NOT NULL,
      b2829 REAL NOT NULL,
      b2830 REAL NOT NULL,
      b2831 REAL NOT NULL,
      b2832 REAL NOT NULL,
      b2833 REAL NOT NULL,
      b2834 REAL NOT NULL,
      b2835 REAL NOT NULL,
      b2836 REAL NOT NULL,
      b2837 REAL NOT NULL,
      b2838 REAL NOT NULL,
      b2839 REAL NOT NULL,
      b2840 REAL NOT NULL,
      b2841 REAL NOT NULL,
      b2842 REAL NOT NULL,
      b2843 REAL NOT NULL,
      b2844 REAL NOT NULL,
      b2845 REAL NOT NULL,
      b2846 REAL NOT NULL,
      b2847 REAL NOT NULL,
      b2848 REAL NOT NULL,
      b2849 REAL NOT NULL,
      b2850 REAL NOT NULL,
      b2851 REAL NOT NULL,
      b2852 REAL NOT NULL,
      b2853 REAL NOT NULL,
      b2854 REAL NOT NULL,
      b2855 REAL NOT NULL,
      b2856 REAL NOT NULL,
      b2857 REAL NOT NULL,
      b2858 REAL NOT NULL,
      b2859 REAL NOT NULL,
      b2860 REAL NOT NULL,
      b2861 REAL NOT NULL,
      b2862 REAL NOT NULL,
      b2863 REAL NOT NULL,
      b2864 REAL NOT NULL,
      b2865 REAL NOT NULL,
      b2866 REAL NOT NULL,
      b2867 REAL NOT NULL,
      b2868 REAL NOT NULL,
      b2869 REAL NOT NULL,
      b2870 REAL NOT NULL,
      b2871 REAL NOT NULL,
      b2872 REAL NOT NULL,
      b2873 REAL NOT NULL,
      b2874 REAL NOT NULL,
      b2875 REAL NOT NULL,
      b2876 REAL NOT NULL,
      b2877 REAL NOT NULL,
      b2878 REAL NOT NULL,
      b2879 REAL NOT NULL,
      b2880 REAL NOT NULL,
      b2881 REAL NOT NULL,
      b2882 REAL NOT NULL,
      b2883 REAL NOT NULL,
      b2884 REAL NOT NULL,
      b2885 REAL NOT NULL,
      b2886 REAL NOT NULL,
      b2887 REAL NOT NULL,
      b2888 REAL NOT NULL,
      b2889 REAL NOT NULL,
      b2890 REAL NOT NULL,
      b2891 REAL NOT NULL,
      b2892 REAL NOT NULL,
      b2893 REAL NOT NULL,
      b2894 REAL NOT NULL,
      b2895 REAL NOT NULL,
      b2896 REAL NOT NULL,
      b2897 REAL NOT NULL,
      b2898 REAL NOT NULL,
      b2899 REAL NOT NULL,
      b2900 REAL NOT NULL,
      b2901 REAL NOT NULL,
      b2902 REAL NOT NULL,
      b2903 REAL NOT NULL,
      b2904 REAL NOT NULL,
      b2905 REAL NOT NULL,
      b2906 REAL NOT NULL,
      b2907 REAL NOT NULL,
      b2908 REAL NOT NULL,
      b2909 REAL NOT NULL,
      b2910 REAL NOT NULL,
      b2911 REAL NOT NULL,
      b2912 REAL NOT NULL,
      b2913 REAL NOT NULL,
      b2914 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB16 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

