=head1 NAME

ORDB::AU::Census2006::BcpCdB14 - ORDB::AU::Census2006 class for the bcp_cd_b14 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB14->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b14'
  print ORDB::AU::Census2006::BcpCdB14->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB14->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB14> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB14->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB14->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b14 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b14> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB14> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB14> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB14->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB14->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB14->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b14 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB14->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB14->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b14 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b14> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b14 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b14 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b2204 REAL NOT NULL,
      b2205 REAL NOT NULL,
      b2206 REAL NOT NULL,
      b2207 REAL NOT NULL,
      b2208 REAL NOT NULL,
      b2209 REAL NOT NULL,
      b2210 REAL NOT NULL,
      b2211 REAL NOT NULL,
      b2212 REAL NOT NULL,
      b2213 REAL NOT NULL,
      b2214 REAL NOT NULL,
      b2215 REAL NOT NULL,
      b2216 REAL NOT NULL,
      b2217 REAL NOT NULL,
      b2218 REAL NOT NULL,
      b2219 REAL NOT NULL,
      b2220 REAL NOT NULL,
      b2221 REAL NOT NULL,
      b2222 REAL NOT NULL,
      b2223 REAL NOT NULL,
      b2224 REAL NOT NULL,
      b2225 REAL NOT NULL,
      b2226 REAL NOT NULL,
      b2227 REAL NOT NULL,
      b2228 REAL NOT NULL,
      b2229 REAL NOT NULL,
      b2230 REAL NOT NULL,
      b2231 REAL NOT NULL,
      b2232 REAL NOT NULL,
      b2233 REAL NOT NULL,
      b2234 REAL NOT NULL,
      b2235 REAL NOT NULL,
      b2236 REAL NOT NULL,
      b2237 REAL NOT NULL,
      b2238 REAL NOT NULL,
      b2239 REAL NOT NULL,
      b2240 REAL NOT NULL,
      b2241 REAL NOT NULL,
      b2242 REAL NOT NULL,
      b2243 REAL NOT NULL,
      b2244 REAL NOT NULL,
      b2245 REAL NOT NULL,
      b2246 REAL NOT NULL,
      b2247 REAL NOT NULL,
      b2248 REAL NOT NULL,
      b2249 REAL NOT NULL,
      b2250 REAL NOT NULL,
      b2251 REAL NOT NULL,
      b2252 REAL NOT NULL,
      b2253 REAL NOT NULL,
      b2254 REAL NOT NULL,
      b2255 REAL NOT NULL,
      b2256 REAL NOT NULL,
      b2257 REAL NOT NULL,
      b2258 REAL NOT NULL,
      b2259 REAL NOT NULL,
      b2260 REAL NOT NULL,
      b2261 REAL NOT NULL,
      b2262 REAL NOT NULL,
      b2263 REAL NOT NULL,
      b2264 REAL NOT NULL,
      b2265 REAL NOT NULL,
      b2266 REAL NOT NULL,
      b2267 REAL NOT NULL,
      b2268 REAL NOT NULL,
      b2269 REAL NOT NULL,
      b2270 REAL NOT NULL,
      b2271 REAL NOT NULL,
      b2272 REAL NOT NULL,
      b2273 REAL NOT NULL,
      b2274 REAL NOT NULL,
      b2275 REAL NOT NULL,
      b2276 REAL NOT NULL,
      b2277 REAL NOT NULL,
      b2278 REAL NOT NULL,
      b2279 REAL NOT NULL,
      b2280 REAL NOT NULL,
      b2281 REAL NOT NULL,
      b2282 REAL NOT NULL,
      b2283 REAL NOT NULL,
      b2284 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB14 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

