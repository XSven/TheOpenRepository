=head1 NAME

ORDB::AU::Census2006::BcpCdB11 - ORDB::AU::Census2006 class for the bcp_cd_b11 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB11->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b11'
  print ORDB::AU::Census2006::BcpCdB11->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB11->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB11> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB11->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB11->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b11 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b11> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB11> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB11> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB11->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB11->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB11->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b11 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB11->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB11->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b11 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b11> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b11 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b11 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b1757 REAL NOT NULL,
      b1758 REAL NOT NULL,
      b1759 REAL NOT NULL,
      b1760 REAL NOT NULL,
      b1761 REAL NOT NULL,
      b1762 REAL NOT NULL,
      b1763 REAL NOT NULL,
      b1764 REAL NOT NULL,
      b1765 REAL NOT NULL,
      b1766 REAL NOT NULL,
      b1767 REAL NOT NULL,
      b1768 REAL NOT NULL,
      b1769 REAL NOT NULL,
      b1770 REAL NOT NULL,
      b1771 REAL NOT NULL,
      b1772 REAL NOT NULL,
      b1773 REAL NOT NULL,
      b1774 REAL NOT NULL,
      b1775 REAL NOT NULL,
      b1776 REAL NOT NULL,
      b1777 REAL NOT NULL,
      b1778 REAL NOT NULL,
      b1779 REAL NOT NULL,
      b1780 REAL NOT NULL,
      b1781 REAL NOT NULL,
      b1782 REAL NOT NULL,
      b1783 REAL NOT NULL,
      b1784 REAL NOT NULL,
      b1785 REAL NOT NULL,
      b1786 REAL NOT NULL,
      b1787 REAL NOT NULL,
      b1788 REAL NOT NULL,
      b1789 REAL NOT NULL,
      b1790 REAL NOT NULL,
      b1791 REAL NOT NULL,
      b1792 REAL NOT NULL,
      b1793 REAL NOT NULL,
      b1794 REAL NOT NULL,
      b1795 REAL NOT NULL,
      b1796 REAL NOT NULL,
      b1797 REAL NOT NULL,
      b1798 REAL NOT NULL,
      b1799 REAL NOT NULL,
      b1800 REAL NOT NULL,
      b1801 REAL NOT NULL,
      b1802 REAL NOT NULL,
      b1803 REAL NOT NULL,
      b1804 REAL NOT NULL,
      b1805 REAL NOT NULL,
      b1806 REAL NOT NULL,
      b1807 REAL NOT NULL,
      b1808 REAL NOT NULL,
      b1809 REAL NOT NULL,
      b1810 REAL NOT NULL,
      b1811 REAL NOT NULL,
      b1812 REAL NOT NULL,
      b1813 REAL NOT NULL,
      b1814 REAL NOT NULL,
      b1815 REAL NOT NULL,
      b1816 REAL NOT NULL,
      b1817 REAL NOT NULL,
      b1818 REAL NOT NULL,
      b1819 REAL NOT NULL,
      b1820 REAL NOT NULL,
      b1821 REAL NOT NULL,
      b1822 REAL NOT NULL,
      b1823 REAL NOT NULL,
      b1824 REAL NOT NULL,
      b1825 REAL NOT NULL,
      b1826 REAL NOT NULL,
      b1827 REAL NOT NULL,
      b1828 REAL NOT NULL,
      b1829 REAL NOT NULL,
      b1830 REAL NOT NULL,
      b1831 REAL NOT NULL,
      b1832 REAL NOT NULL,
      b1833 REAL NOT NULL,
      b1834 REAL NOT NULL,
      b1835 REAL NOT NULL,
      b1836 REAL NOT NULL,
      b1837 REAL NOT NULL,
      b1838 REAL NOT NULL,
      b1839 REAL NOT NULL,
      b1840 REAL NOT NULL,
      b1841 REAL NOT NULL,
      b1842 REAL NOT NULL,
      b1843 REAL NOT NULL,
      b1844 REAL NOT NULL,
      b1845 REAL NOT NULL,
      b1846 REAL NOT NULL,
      b1847 REAL NOT NULL,
      b1848 REAL NOT NULL,
      b1849 REAL NOT NULL,
      b1850 REAL NOT NULL,
      b1851 REAL NOT NULL,
      b1852 REAL NOT NULL,
      b1853 REAL NOT NULL,
      b1854 REAL NOT NULL,
      b1855 REAL NOT NULL,
      b1856 REAL NOT NULL,
      b1857 REAL NOT NULL,
      b1858 REAL NOT NULL,
      b1859 REAL NOT NULL,
      b1860 REAL NOT NULL,
      b1861 REAL NOT NULL,
      b1862 REAL NOT NULL,
      b1863 REAL NOT NULL,
      b1864 REAL NOT NULL,
      b1865 REAL NOT NULL,
      b1866 REAL NOT NULL,
      b1867 REAL NOT NULL,
      b1868 REAL NOT NULL,
      b1869 REAL NOT NULL,
      b1870 REAL NOT NULL,
      b1871 REAL NOT NULL,
      b1872 REAL NOT NULL,
      b1873 REAL NOT NULL,
      b1874 REAL NOT NULL,
      b1875 REAL NOT NULL,
      b1876 REAL NOT NULL,
      b1877 REAL NOT NULL,
      b1878 REAL NOT NULL,
      b1879 REAL NOT NULL,
      b1880 REAL NOT NULL,
      b1881 REAL NOT NULL,
      b1882 REAL NOT NULL,
      b1883 REAL NOT NULL,
      b1884 REAL NOT NULL,
      b1885 REAL NOT NULL,
      b1886 REAL NOT NULL,
      b1887 REAL NOT NULL,
      b1888 REAL NOT NULL,
      b1889 REAL NOT NULL,
      b1890 REAL NOT NULL,
      b1891 REAL NOT NULL,
      b1892 REAL NOT NULL,
      b1893 REAL NOT NULL,
      b1894 REAL NOT NULL,
      b1895 REAL NOT NULL,
      b1896 REAL NOT NULL,
      b1897 REAL NOT NULL,
      b1898 REAL NOT NULL,
      b1899 REAL NOT NULL,
      b1900 REAL NOT NULL,
      b1901 REAL NOT NULL,
      b1902 REAL NOT NULL,
      b1903 REAL NOT NULL,
      b1904 REAL NOT NULL,
      b1905 REAL NOT NULL,
      b1906 REAL NOT NULL,
      b1907 REAL NOT NULL,
      b1908 REAL NOT NULL,
      b1909 REAL NOT NULL,
      b1910 REAL NOT NULL,
      b1911 REAL NOT NULL,
      b1912 REAL NOT NULL,
      b1913 REAL NOT NULL,
      b1914 REAL NOT NULL,
      b1915 REAL NOT NULL,
      b1916 REAL NOT NULL,
      b1917 REAL NOT NULL,
      b1918 REAL NOT NULL,
      b1919 REAL NOT NULL,
      b1920 REAL NOT NULL,
      b1921 REAL NOT NULL,
      b1922 REAL NOT NULL,
      b1923 REAL NOT NULL,
      b1924 REAL NOT NULL,
      b1925 REAL NOT NULL,
      b1926 REAL NOT NULL,
      b1927 REAL NOT NULL,
      b1928 REAL NOT NULL,
      b1929 REAL NOT NULL,
      b1930 REAL NOT NULL,
      b1931 REAL NOT NULL,
      b1932 REAL NOT NULL,
      b1933 REAL NOT NULL,
      b1934 REAL NOT NULL,
      b1935 REAL NOT NULL,
      b1936 REAL NOT NULL,
      b1937 REAL NOT NULL,
      b1938 REAL NOT NULL,
      b1939 REAL NOT NULL,
      b1940 REAL NOT NULL,
      b1941 REAL NOT NULL,
      b1942 REAL NOT NULL,
      b1943 REAL NOT NULL,
      b1944 REAL NOT NULL,
      b1945 REAL NOT NULL,
      b1946 REAL NOT NULL,
      b1947 REAL NOT NULL,
      b1948 REAL NOT NULL,
      b1949 REAL NOT NULL,
      b1950 REAL NOT NULL,
      b1951 REAL NOT NULL,
      b1952 REAL NOT NULL,
      b1953 REAL NOT NULL,
      b1954 REAL NOT NULL,
      b1955 REAL NOT NULL,
      b1956 REAL NOT NULL,
      b1957 REAL NOT NULL,
      b1958 REAL NOT NULL,
      b1959 REAL NOT NULL,
      b1960 REAL NOT NULL,
      b1961 REAL NOT NULL,
      b1962 REAL NOT NULL,
      b1963 REAL NOT NULL,
      b1964 REAL NOT NULL,
      b1965 REAL NOT NULL,
      b1966 REAL NOT NULL,
      b1967 REAL NOT NULL,
      b1968 REAL NOT NULL,
      b1969 REAL NOT NULL,
      b1970 REAL NOT NULL,
      b1971 REAL NOT NULL,
      b1972 REAL NOT NULL,
      b1973 REAL NOT NULL,
      b1974 REAL NOT NULL,
      b1975 REAL NOT NULL,
      b1976 REAL NOT NULL,
      b1977 REAL NOT NULL,
      b1978 REAL NOT NULL,
      b1979 REAL NOT NULL,
      b1980 REAL NOT NULL,
      b1981 REAL NOT NULL,
      b1982 REAL NOT NULL,
      b1983 REAL NOT NULL,
      b1984 REAL NOT NULL,
      b1985 REAL NOT NULL,
      b1986 REAL NOT NULL,
      b1987 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB11 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

