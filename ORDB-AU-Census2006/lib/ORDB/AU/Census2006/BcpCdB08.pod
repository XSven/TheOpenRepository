=head1 NAME

ORDB::AU::Census2006::BcpCdB08 - ORDB::AU::Census2006 class for the bcp_cd_b08 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB08->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b08'
  print ORDB::AU::Census2006::BcpCdB08->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB08->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB08> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB08->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB08->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b08 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b08> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB08> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB08> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB08->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB08->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB08->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b08 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB08->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB08->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b08 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b08> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b08 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b08 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b1043 REAL NOT NULL,
      b1044 REAL NOT NULL,
      b1045 REAL NOT NULL,
      b1046 REAL NOT NULL,
      b1047 REAL NOT NULL,
      b1048 REAL NOT NULL,
      b1049 REAL NOT NULL,
      b1050 REAL NOT NULL,
      b1051 REAL NOT NULL,
      b1052 REAL NOT NULL,
      b1053 REAL NOT NULL,
      b1054 REAL NOT NULL,
      b1055 REAL NOT NULL,
      b1056 REAL NOT NULL,
      b1057 REAL NOT NULL,
      b1058 REAL NOT NULL,
      b1059 REAL NOT NULL,
      b1060 REAL NOT NULL,
      b1061 REAL NOT NULL,
      b1062 REAL NOT NULL,
      b1063 REAL NOT NULL,
      b1064 REAL NOT NULL,
      b1065 REAL NOT NULL,
      b1066 REAL NOT NULL,
      b1067 REAL NOT NULL,
      b1068 REAL NOT NULL,
      b1069 REAL NOT NULL,
      b1070 REAL NOT NULL,
      b1071 REAL NOT NULL,
      b1072 REAL NOT NULL,
      b1073 REAL NOT NULL,
      b1074 REAL NOT NULL,
      b1075 REAL NOT NULL,
      b1076 REAL NOT NULL,
      b1077 REAL NOT NULL,
      b1078 REAL NOT NULL,
      b1079 REAL NOT NULL,
      b1080 REAL NOT NULL,
      b1081 REAL NOT NULL,
      b1082 REAL NOT NULL,
      b1083 REAL NOT NULL,
      b1084 REAL NOT NULL,
      b1085 REAL NOT NULL,
      b1086 REAL NOT NULL,
      b1087 REAL NOT NULL,
      b1088 REAL NOT NULL,
      b1089 REAL NOT NULL,
      b1090 REAL NOT NULL,
      b1091 REAL NOT NULL,
      b1092 REAL NOT NULL,
      b1093 REAL NOT NULL,
      b1094 REAL NOT NULL,
      b1095 REAL NOT NULL,
      b1096 REAL NOT NULL,
      b1097 REAL NOT NULL,
      b1098 REAL NOT NULL,
      b1099 REAL NOT NULL,
      b1100 REAL NOT NULL,
      b1101 REAL NOT NULL,
      b1102 REAL NOT NULL,
      b1103 REAL NOT NULL,
      b1104 REAL NOT NULL,
      b1105 REAL NOT NULL,
      b1106 REAL NOT NULL,
      b1107 REAL NOT NULL,
      b1108 REAL NOT NULL,
      b1109 REAL NOT NULL,
      b1110 REAL NOT NULL,
      b1111 REAL NOT NULL,
      b1112 REAL NOT NULL,
      b1113 REAL NOT NULL,
      b1114 REAL NOT NULL,
      b1115 REAL NOT NULL,
      b1116 REAL NOT NULL,
      b1117 REAL NOT NULL,
      b1118 REAL NOT NULL,
      b1119 REAL NOT NULL,
      b1120 REAL NOT NULL,
      b1121 REAL NOT NULL,
      b1122 REAL NOT NULL,
      b1123 REAL NOT NULL,
      b1124 REAL NOT NULL,
      b1125 REAL NOT NULL,
      b1126 REAL NOT NULL,
      b1127 REAL NOT NULL,
      b1128 REAL NOT NULL,
      b1129 REAL NOT NULL,
      b1130 REAL NOT NULL,
      b1131 REAL NOT NULL,
      b1132 REAL NOT NULL,
      b1133 REAL NOT NULL,
      b1134 REAL NOT NULL,
      b1135 REAL NOT NULL,
      b1136 REAL NOT NULL,
      b1137 REAL NOT NULL,
      b1138 REAL NOT NULL,
      b1139 REAL NOT NULL,
      b1140 REAL NOT NULL,
      b1141 REAL NOT NULL,
      b1142 REAL NOT NULL,
      b1143 REAL NOT NULL,
      b1144 REAL NOT NULL,
      b1145 REAL NOT NULL,
      b1146 REAL NOT NULL,
      b1147 REAL NOT NULL,
      b1148 REAL NOT NULL,
      b1149 REAL NOT NULL,
      b1150 REAL NOT NULL,
      b1151 REAL NOT NULL,
      b1152 REAL NOT NULL,
      b1153 REAL NOT NULL,
      b1154 REAL NOT NULL,
      b1155 REAL NOT NULL,
      b1156 REAL NOT NULL,
      b1157 REAL NOT NULL,
      b1158 REAL NOT NULL,
      b1159 REAL NOT NULL,
      b1160 REAL NOT NULL,
      b1161 REAL NOT NULL,
      b1162 REAL NOT NULL,
      b1163 REAL NOT NULL,
      b1164 REAL NOT NULL,
      b1165 REAL NOT NULL,
      b1166 REAL NOT NULL,
      b1167 REAL NOT NULL,
      b1168 REAL NOT NULL,
      b1169 REAL NOT NULL,
      b1170 REAL NOT NULL,
      b1171 REAL NOT NULL,
      b1172 REAL NOT NULL,
      b1173 REAL NOT NULL,
      b1174 REAL NOT NULL,
      b1175 REAL NOT NULL,
      b1176 REAL NOT NULL,
      b1177 REAL NOT NULL,
      b1178 REAL NOT NULL,
      b1179 REAL NOT NULL,
      b1180 REAL NOT NULL,
      b1181 REAL NOT NULL,
      b1182 REAL NOT NULL,
      b1183 REAL NOT NULL,
      b1184 REAL NOT NULL,
      b1185 REAL NOT NULL,
      b1186 REAL NOT NULL,
      b1187 REAL NOT NULL,
      b1188 REAL NOT NULL,
      b1189 REAL NOT NULL,
      b1190 REAL NOT NULL,
      b1191 REAL NOT NULL,
      b1192 REAL NOT NULL,
      b1193 REAL NOT NULL,
      b1194 REAL NOT NULL,
      b1195 REAL NOT NULL,
      b1196 REAL NOT NULL,
      b1197 REAL NOT NULL,
      b1198 REAL NOT NULL,
      b1199 REAL NOT NULL,
      b1200 REAL NOT NULL,
      b1201 REAL NOT NULL,
      b1202 REAL NOT NULL,
      b1203 REAL NOT NULL,
      b1204 REAL NOT NULL,
      b1205 REAL NOT NULL,
      b1206 REAL NOT NULL,
      b1207 REAL NOT NULL,
      b1208 REAL NOT NULL,
      b1209 REAL NOT NULL,
      b1210 REAL NOT NULL,
      b1211 REAL NOT NULL,
      b1212 REAL NOT NULL,
      b1213 REAL NOT NULL,
      b1214 REAL NOT NULL,
      b1215 REAL NOT NULL,
      b1216 REAL NOT NULL,
      b1217 REAL NOT NULL,
      b1218 REAL NOT NULL,
      b1219 REAL NOT NULL,
      b1220 REAL NOT NULL,
      b1221 REAL NOT NULL,
      b1222 REAL NOT NULL,
      b1223 REAL NOT NULL,
      b1224 REAL NOT NULL,
      b1225 REAL NOT NULL,
      b1226 REAL NOT NULL,
      b1227 REAL NOT NULL,
      b1228 REAL NOT NULL,
      b1229 REAL NOT NULL,
      b1230 REAL NOT NULL,
      b1231 REAL NOT NULL,
      b1232 REAL NOT NULL,
      b1233 REAL NOT NULL,
      b1234 REAL NOT NULL,
      b1235 REAL NOT NULL,
      b1236 REAL NOT NULL,
      b1237 REAL NOT NULL,
      b1238 REAL NOT NULL,
      b1239 REAL NOT NULL,
      b1240 REAL NOT NULL,
      b1241 REAL NOT NULL,
      b1242 REAL NOT NULL,
      b1243 REAL NOT NULL,
      b1244 REAL NOT NULL,
      b1245 REAL NOT NULL,
      b1246 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB08 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

