=head1 NAME

ORDB::AU::Census2006::BcpCdB10 - ORDB::AU::Census2006 class for the bcp_cd_b10 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB10->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b10'
  print ORDB::AU::Census2006::BcpCdB10->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB10->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB10> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB10->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB10->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b10 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b10> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB10> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB10> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB10->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB10->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB10->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b10 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB10->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB10->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b10 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b10> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b10 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b10 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b1361 REAL NOT NULL,
      b1362 REAL NOT NULL,
      b1363 REAL NOT NULL,
      b1364 REAL NOT NULL,
      b1365 REAL NOT NULL,
      b1366 REAL NOT NULL,
      b1367 REAL NOT NULL,
      b1368 REAL NOT NULL,
      b1369 REAL NOT NULL,
      b1370 REAL NOT NULL,
      b1371 REAL NOT NULL,
      b1372 REAL NOT NULL,
      b1373 REAL NOT NULL,
      b1374 REAL NOT NULL,
      b1375 REAL NOT NULL,
      b1376 REAL NOT NULL,
      b1377 REAL NOT NULL,
      b1378 REAL NOT NULL,
      b1379 REAL NOT NULL,
      b1380 REAL NOT NULL,
      b1381 REAL NOT NULL,
      b1382 REAL NOT NULL,
      b1383 REAL NOT NULL,
      b1384 REAL NOT NULL,
      b1385 REAL NOT NULL,
      b1386 REAL NOT NULL,
      b1387 REAL NOT NULL,
      b1388 REAL NOT NULL,
      b1389 REAL NOT NULL,
      b1390 REAL NOT NULL,
      b1391 REAL NOT NULL,
      b1392 REAL NOT NULL,
      b1393 REAL NOT NULL,
      b1394 REAL NOT NULL,
      b1395 REAL NOT NULL,
      b1396 REAL NOT NULL,
      b1397 REAL NOT NULL,
      b1398 REAL NOT NULL,
      b1399 REAL NOT NULL,
      b1400 REAL NOT NULL,
      b1401 REAL NOT NULL,
      b1402 REAL NOT NULL,
      b1403 REAL NOT NULL,
      b1404 REAL NOT NULL,
      b1405 REAL NOT NULL,
      b1406 REAL NOT NULL,
      b1407 REAL NOT NULL,
      b1408 REAL NOT NULL,
      b1409 REAL NOT NULL,
      b1410 REAL NOT NULL,
      b1411 REAL NOT NULL,
      b1412 REAL NOT NULL,
      b1413 REAL NOT NULL,
      b1414 REAL NOT NULL,
      b1415 REAL NOT NULL,
      b1416 REAL NOT NULL,
      b1417 REAL NOT NULL,
      b1418 REAL NOT NULL,
      b1419 REAL NOT NULL,
      b1420 REAL NOT NULL,
      b1421 REAL NOT NULL,
      b1422 REAL NOT NULL,
      b1423 REAL NOT NULL,
      b1424 REAL NOT NULL,
      b1425 REAL NOT NULL,
      b1426 REAL NOT NULL,
      b1427 REAL NOT NULL,
      b1428 REAL NOT NULL,
      b1429 REAL NOT NULL,
      b1430 REAL NOT NULL,
      b1431 REAL NOT NULL,
      b1432 REAL NOT NULL,
      b1433 REAL NOT NULL,
      b1434 REAL NOT NULL,
      b1435 REAL NOT NULL,
      b1436 REAL NOT NULL,
      b1437 REAL NOT NULL,
      b1438 REAL NOT NULL,
      b1439 REAL NOT NULL,
      b1440 REAL NOT NULL,
      b1441 REAL NOT NULL,
      b1442 REAL NOT NULL,
      b1443 REAL NOT NULL,
      b1444 REAL NOT NULL,
      b1445 REAL NOT NULL,
      b1446 REAL NOT NULL,
      b1447 REAL NOT NULL,
      b1448 REAL NOT NULL,
      b1449 REAL NOT NULL,
      b1450 REAL NOT NULL,
      b1451 REAL NOT NULL,
      b1452 REAL NOT NULL,
      b1453 REAL NOT NULL,
      b1454 REAL NOT NULL,
      b1455 REAL NOT NULL,
      b1456 REAL NOT NULL,
      b1457 REAL NOT NULL,
      b1458 REAL NOT NULL,
      b1459 REAL NOT NULL,
      b1460 REAL NOT NULL,
      b1461 REAL NOT NULL,
      b1462 REAL NOT NULL,
      b1463 REAL NOT NULL,
      b1464 REAL NOT NULL,
      b1465 REAL NOT NULL,
      b1466 REAL NOT NULL,
      b1467 REAL NOT NULL,
      b1468 REAL NOT NULL,
      b1469 REAL NOT NULL,
      b1470 REAL NOT NULL,
      b1471 REAL NOT NULL,
      b1472 REAL NOT NULL,
      b1473 REAL NOT NULL,
      b1474 REAL NOT NULL,
      b1475 REAL NOT NULL,
      b1476 REAL NOT NULL,
      b1477 REAL NOT NULL,
      b1478 REAL NOT NULL,
      b1479 REAL NOT NULL,
      b1480 REAL NOT NULL,
      b1481 REAL NOT NULL,
      b1482 REAL NOT NULL,
      b1483 REAL NOT NULL,
      b1484 REAL NOT NULL,
      b1485 REAL NOT NULL,
      b1486 REAL NOT NULL,
      b1487 REAL NOT NULL,
      b1488 REAL NOT NULL,
      b1489 REAL NOT NULL,
      b1490 REAL NOT NULL,
      b1491 REAL NOT NULL,
      b1492 REAL NOT NULL,
      b1493 REAL NOT NULL,
      b1494 REAL NOT NULL,
      b1495 REAL NOT NULL,
      b1496 REAL NOT NULL,
      b1497 REAL NOT NULL,
      b1498 REAL NOT NULL,
      b1499 REAL NOT NULL,
      b1500 REAL NOT NULL,
      b1501 REAL NOT NULL,
      b1502 REAL NOT NULL,
      b1503 REAL NOT NULL,
      b1504 REAL NOT NULL,
      b1505 REAL NOT NULL,
      b1506 REAL NOT NULL,
      b1507 REAL NOT NULL,
      b1508 REAL NOT NULL,
      b1509 REAL NOT NULL,
      b1510 REAL NOT NULL,
      b1511 REAL NOT NULL,
      b1512 REAL NOT NULL,
      b1513 REAL NOT NULL,
      b1514 REAL NOT NULL,
      b1515 REAL NOT NULL,
      b1516 REAL NOT NULL,
      b1517 REAL NOT NULL,
      b1518 REAL NOT NULL,
      b1519 REAL NOT NULL,
      b1520 REAL NOT NULL,
      b1521 REAL NOT NULL,
      b1522 REAL NOT NULL,
      b1523 REAL NOT NULL,
      b1524 REAL NOT NULL,
      b1525 REAL NOT NULL,
      b1526 REAL NOT NULL,
      b1527 REAL NOT NULL,
      b1528 REAL NOT NULL,
      b1529 REAL NOT NULL,
      b1530 REAL NOT NULL,
      b1531 REAL NOT NULL,
      b1532 REAL NOT NULL,
      b1533 REAL NOT NULL,
      b1534 REAL NOT NULL,
      b1535 REAL NOT NULL,
      b1536 REAL NOT NULL,
      b1537 REAL NOT NULL,
      b1538 REAL NOT NULL,
      b1539 REAL NOT NULL,
      b1540 REAL NOT NULL,
      b1541 REAL NOT NULL,
      b1542 REAL NOT NULL,
      b1543 REAL NOT NULL,
      b1544 REAL NOT NULL,
      b1545 REAL NOT NULL,
      b1546 REAL NOT NULL,
      b1547 REAL NOT NULL,
      b1548 REAL NOT NULL,
      b1549 REAL NOT NULL,
      b1550 REAL NOT NULL,
      b1551 REAL NOT NULL,
      b1552 REAL NOT NULL,
      b1553 REAL NOT NULL,
      b1554 REAL NOT NULL,
      b1555 REAL NOT NULL,
      b1556 REAL NOT NULL,
      b1557 REAL NOT NULL,
      b1558 REAL NOT NULL,
      b1559 REAL NOT NULL,
      b1560 REAL NOT NULL,
      b1561 REAL NOT NULL,
      b1562 REAL NOT NULL,
      b1563 REAL NOT NULL,
      b1564 REAL NOT NULL,
      b1565 REAL NOT NULL,
      b1566 REAL NOT NULL,
      b1567 REAL NOT NULL,
      b1568 REAL NOT NULL,
      b1569 REAL NOT NULL,
      b1570 REAL NOT NULL,
      b1571 REAL NOT NULL,
      b1572 REAL NOT NULL,
      b1573 REAL NOT NULL,
      b1574 REAL NOT NULL,
      b1575 REAL NOT NULL,
      b1576 REAL NOT NULL,
      b1577 REAL NOT NULL,
      b1578 REAL NOT NULL,
      b1579 REAL NOT NULL,
      b1580 REAL NOT NULL,
      b1581 REAL NOT NULL,
      b1582 REAL NOT NULL,
      b1583 REAL NOT NULL,
      b1584 REAL NOT NULL,
      b1585 REAL NOT NULL,
      b1586 REAL NOT NULL,
      b1587 REAL NOT NULL,
      b1588 REAL NOT NULL,
      b1589 REAL NOT NULL,
      b1590 REAL NOT NULL,
      b1591 REAL NOT NULL,
      b1592 REAL NOT NULL,
      b1593 REAL NOT NULL,
      b1594 REAL NOT NULL,
      b1595 REAL NOT NULL,
      b1596 REAL NOT NULL,
      b1597 REAL NOT NULL,
      b1598 REAL NOT NULL,
      b1599 REAL NOT NULL,
      b1600 REAL NOT NULL,
      b1601 REAL NOT NULL,
      b1602 REAL NOT NULL,
      b1603 REAL NOT NULL,
      b1604 REAL NOT NULL,
      b1605 REAL NOT NULL,
      b1606 REAL NOT NULL,
      b1607 REAL NOT NULL,
      b1608 REAL NOT NULL,
      b1609 REAL NOT NULL,
      b1610 REAL NOT NULL,
      b1611 REAL NOT NULL,
      b1612 REAL NOT NULL,
      b1613 REAL NOT NULL,
      b1614 REAL NOT NULL,
      b1615 REAL NOT NULL,
      b1616 REAL NOT NULL,
      b1617 REAL NOT NULL,
      b1618 REAL NOT NULL,
      b1619 REAL NOT NULL,
      b1620 REAL NOT NULL,
      b1621 REAL NOT NULL,
      b1622 REAL NOT NULL,
      b1623 REAL NOT NULL,
      b1624 REAL NOT NULL,
      b1625 REAL NOT NULL,
      b1626 REAL NOT NULL,
      b1627 REAL NOT NULL,
      b1628 REAL NOT NULL,
      b1629 REAL NOT NULL,
      b1630 REAL NOT NULL,
      b1631 REAL NOT NULL,
      b1632 REAL NOT NULL,
      b1633 REAL NOT NULL,
      b1634 REAL NOT NULL,
      b1635 REAL NOT NULL,
      b1636 REAL NOT NULL,
      b1637 REAL NOT NULL,
      b1638 REAL NOT NULL,
      b1639 REAL NOT NULL,
      b1640 REAL NOT NULL,
      b1641 REAL NOT NULL,
      b1642 REAL NOT NULL,
      b1643 REAL NOT NULL,
      b1644 REAL NOT NULL,
      b1645 REAL NOT NULL,
      b1646 REAL NOT NULL,
      b1647 REAL NOT NULL,
      b1648 REAL NOT NULL,
      b1649 REAL NOT NULL,
      b1650 REAL NOT NULL,
      b1651 REAL NOT NULL,
      b1652 REAL NOT NULL,
      b1653 REAL NOT NULL,
      b1654 REAL NOT NULL,
      b1655 REAL NOT NULL,
      b1656 REAL NOT NULL,
      b1657 REAL NOT NULL,
      b1658 REAL NOT NULL,
      b1659 REAL NOT NULL,
      b1660 REAL NOT NULL,
      b1661 REAL NOT NULL,
      b1662 REAL NOT NULL,
      b1663 REAL NOT NULL,
      b1664 REAL NOT NULL,
      b1665 REAL NOT NULL,
      b1666 REAL NOT NULL,
      b1667 REAL NOT NULL,
      b1668 REAL NOT NULL,
      b1669 REAL NOT NULL,
      b1670 REAL NOT NULL,
      b1671 REAL NOT NULL,
      b1672 REAL NOT NULL,
      b1673 REAL NOT NULL,
      b1674 REAL NOT NULL,
      b1675 REAL NOT NULL,
      b1676 REAL NOT NULL,
      b1677 REAL NOT NULL,
      b1678 REAL NOT NULL,
      b1679 REAL NOT NULL,
      b1680 REAL NOT NULL,
      b1681 REAL NOT NULL,
      b1682 REAL NOT NULL,
      b1683 REAL NOT NULL,
      b1684 REAL NOT NULL,
      b1685 REAL NOT NULL,
      b1686 REAL NOT NULL,
      b1687 REAL NOT NULL,
      b1688 REAL NOT NULL,
      b1689 REAL NOT NULL,
      b1690 REAL NOT NULL,
      b1691 REAL NOT NULL,
      b1692 REAL NOT NULL,
      b1693 REAL NOT NULL,
      b1694 REAL NOT NULL,
      b1695 REAL NOT NULL,
      b1696 REAL NOT NULL,
      b1697 REAL NOT NULL,
      b1698 REAL NOT NULL,
      b1699 REAL NOT NULL,
      b1700 REAL NOT NULL,
      b1701 REAL NOT NULL,
      b1702 REAL NOT NULL,
      b1703 REAL NOT NULL,
      b1704 REAL NOT NULL,
      b1705 REAL NOT NULL,
      b1706 REAL NOT NULL,
      b1707 REAL NOT NULL,
      b1708 REAL NOT NULL,
      b1709 REAL NOT NULL,
      b1710 REAL NOT NULL,
      b1711 REAL NOT NULL,
      b1712 REAL NOT NULL,
      b1713 REAL NOT NULL,
      b1714 REAL NOT NULL,
      b1715 REAL NOT NULL,
      b1716 REAL NOT NULL,
      b1717 REAL NOT NULL,
      b1718 REAL NOT NULL,
      b1719 REAL NOT NULL,
      b1720 REAL NOT NULL,
      b1721 REAL NOT NULL,
      b1722 REAL NOT NULL,
      b1723 REAL NOT NULL,
      b1724 REAL NOT NULL,
      b1725 REAL NOT NULL,
      b1726 REAL NOT NULL,
      b1727 REAL NOT NULL,
      b1728 REAL NOT NULL,
      b1729 REAL NOT NULL,
      b1730 REAL NOT NULL,
      b1731 REAL NOT NULL,
      b1732 REAL NOT NULL,
      b1733 REAL NOT NULL,
      b1734 REAL NOT NULL,
      b1735 REAL NOT NULL,
      b1736 REAL NOT NULL,
      b1737 REAL NOT NULL,
      b1738 REAL NOT NULL,
      b1739 REAL NOT NULL,
      b1740 REAL NOT NULL,
      b1741 REAL NOT NULL,
      b1742 REAL NOT NULL,
      b1743 REAL NOT NULL,
      b1744 REAL NOT NULL,
      b1745 REAL NOT NULL,
      b1746 REAL NOT NULL,
      b1747 REAL NOT NULL,
      b1748 REAL NOT NULL,
      b1749 REAL NOT NULL,
      b1750 REAL NOT NULL,
      b1751 REAL NOT NULL,
      b1752 REAL NOT NULL,
      b1753 REAL NOT NULL,
      b1754 REAL NOT NULL,
      b1755 REAL NOT NULL,
      b1756 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB10 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

