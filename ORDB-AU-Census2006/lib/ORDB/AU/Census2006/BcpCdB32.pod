=head1 NAME

ORDB::AU::Census2006::BcpCdB32 - ORDB::AU::Census2006 class for the bcp_cd_b32 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB32->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b32'
  print ORDB::AU::Census2006::BcpCdB32->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB32->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB32> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB32->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB32->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b32 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b32> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB32> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB32> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB32->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB32->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB32->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b32 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB32->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB32->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b32 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b32> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b32 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b32 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b4526 REAL NOT NULL,
      b4527 REAL NOT NULL,
      b4528 REAL NOT NULL,
      b4529 REAL NOT NULL,
      b4530 REAL NOT NULL,
      b4531 REAL NOT NULL,
      b4532 REAL NOT NULL,
      b4533 REAL NOT NULL,
      b4534 REAL NOT NULL,
      b4535 REAL NOT NULL,
      b4536 REAL NOT NULL,
      b4537 REAL NOT NULL,
      b4538 REAL NOT NULL,
      b4539 REAL NOT NULL,
      b4540 REAL NOT NULL,
      b4541 REAL NOT NULL,
      b4542 REAL NOT NULL,
      b4543 REAL NOT NULL,
      b4544 REAL NOT NULL,
      b4545 REAL NOT NULL,
      b4546 REAL NOT NULL,
      b4547 REAL NOT NULL,
      b4548 REAL NOT NULL,
      b4549 REAL NOT NULL,
      b4550 REAL NOT NULL,
      b4551 REAL NOT NULL,
      b4552 REAL NOT NULL,
      b4553 REAL NOT NULL,
      b4554 REAL NOT NULL,
      b4555 REAL NOT NULL,
      b4556 REAL NOT NULL,
      b4557 REAL NOT NULL,
      b4558 REAL NOT NULL,
      b4559 REAL NOT NULL,
      b4560 REAL NOT NULL,
      b4561 REAL NOT NULL,
      b4562 REAL NOT NULL,
      b4563 REAL NOT NULL,
      b4564 REAL NOT NULL,
      b4565 REAL NOT NULL,
      b4566 REAL NOT NULL,
      b4567 REAL NOT NULL,
      b4568 REAL NOT NULL,
      b4569 REAL NOT NULL,
      b4570 REAL NOT NULL,
      b4571 REAL NOT NULL,
      b4572 REAL NOT NULL,
      b4573 REAL NOT NULL,
      b4574 REAL NOT NULL,
      b4575 REAL NOT NULL,
      b4576 REAL NOT NULL,
      b4577 REAL NOT NULL,
      b4578 REAL NOT NULL,
      b4579 REAL NOT NULL,
      b4580 REAL NOT NULL,
      b4581 REAL NOT NULL,
      b4582 REAL NOT NULL,
      b4583 REAL NOT NULL,
      b4584 REAL NOT NULL,
      b4585 REAL NOT NULL,
      b4586 REAL NOT NULL,
      b4587 REAL NOT NULL,
      b4588 REAL NOT NULL,
      b4589 REAL NOT NULL,
      b4590 REAL NOT NULL,
      b4591 REAL NOT NULL,
      b4592 REAL NOT NULL,
      b4593 REAL NOT NULL,
      b4594 REAL NOT NULL,
      b4595 REAL NOT NULL,
      b4596 REAL NOT NULL,
      b4597 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB32 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

