=head1 NAME

ORDB::AU::Census2006::BcpCdB03 - ORDB::AU::Census2006 class for the bcp_cd_b03 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB03->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b03'
  print ORDB::AU::Census2006::BcpCdB03->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB03->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB03> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB03->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB03->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b03 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b03> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB03> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB03> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB03->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB03->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB03->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b03 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB03->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB03->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b03 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b03> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b03 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b03 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b117 REAL NOT NULL,
      b118 REAL NOT NULL,
      b119 REAL NOT NULL,
      b120 REAL NOT NULL,
      b121 REAL NOT NULL,
      b122 REAL NOT NULL,
      b123 REAL NOT NULL,
      b124 REAL NOT NULL,
      b125 REAL NOT NULL,
      b126 REAL NOT NULL,
      b127 REAL NOT NULL,
      b128 REAL NOT NULL,
      b129 REAL NOT NULL,
      b130 REAL NOT NULL,
      b131 REAL NOT NULL,
      b132 REAL NOT NULL,
      b133 REAL NOT NULL,
      b134 REAL NOT NULL,
      b135 REAL NOT NULL,
      b136 REAL NOT NULL,
      b137 REAL NOT NULL,
      b138 REAL NOT NULL,
      b139 REAL NOT NULL,
      b140 REAL NOT NULL,
      b141 REAL NOT NULL,
      b142 REAL NOT NULL,
      b143 REAL NOT NULL,
      b144 REAL NOT NULL,
      b145 REAL NOT NULL,
      b146 REAL NOT NULL,
      b147 REAL NOT NULL,
      b148 REAL NOT NULL,
      b149 REAL NOT NULL,
      b150 REAL NOT NULL,
      b151 REAL NOT NULL,
      b152 REAL NOT NULL,
      b153 REAL NOT NULL,
      b154 REAL NOT NULL,
      b155 REAL NOT NULL,
      b156 REAL NOT NULL,
      b157 REAL NOT NULL,
      b158 REAL NOT NULL,
      b159 REAL NOT NULL,
      b160 REAL NOT NULL,
      b161 REAL NOT NULL,
      b162 REAL NOT NULL,
      b163 REAL NOT NULL,
      b164 REAL NOT NULL,
      b165 REAL NOT NULL,
      b166 REAL NOT NULL,
      b167 REAL NOT NULL,
      b168 REAL NOT NULL,
      b169 REAL NOT NULL,
      b170 REAL NOT NULL,
      b171 REAL NOT NULL,
      b172 REAL NOT NULL,
      b173 REAL NOT NULL,
      b174 REAL NOT NULL,
      b175 REAL NOT NULL,
      b176 REAL NOT NULL,
      b177 REAL NOT NULL,
      b178 REAL NOT NULL,
      b179 REAL NOT NULL,
      b180 REAL NOT NULL,
      b181 REAL NOT NULL,
      b182 REAL NOT NULL,
      b183 REAL NOT NULL,
      b184 REAL NOT NULL,
      b185 REAL NOT NULL,
      b186 REAL NOT NULL,
      b187 REAL NOT NULL,
      b188 REAL NOT NULL,
      b189 REAL NOT NULL,
      b190 REAL NOT NULL,
      b191 REAL NOT NULL,
      b192 REAL NOT NULL,
      b193 REAL NOT NULL,
      b194 REAL NOT NULL,
      b195 REAL NOT NULL,
      b196 REAL NOT NULL,
      b197 REAL NOT NULL,
      b198 REAL NOT NULL,
      b199 REAL NOT NULL,
      b200 REAL NOT NULL,
      b201 REAL NOT NULL,
      b202 REAL NOT NULL,
      b203 REAL NOT NULL,
      b204 REAL NOT NULL,
      b205 REAL NOT NULL,
      b206 REAL NOT NULL,
      b207 REAL NOT NULL,
      b208 REAL NOT NULL,
      b209 REAL NOT NULL,
      b210 REAL NOT NULL,
      b211 REAL NOT NULL,
      b212 REAL NOT NULL,
      b213 REAL NOT NULL,
      b214 REAL NOT NULL,
      b215 REAL NOT NULL,
      b216 REAL NOT NULL,
      b217 REAL NOT NULL,
      b218 REAL NOT NULL,
      b219 REAL NOT NULL,
      b220 REAL NOT NULL,
      b221 REAL NOT NULL,
      b222 REAL NOT NULL,
      b223 REAL NOT NULL,
      b224 REAL NOT NULL,
      b225 REAL NOT NULL,
      b226 REAL NOT NULL,
      b227 REAL NOT NULL,
      b228 REAL NOT NULL,
      b229 REAL NOT NULL,
      b230 REAL NOT NULL,
      b231 REAL NOT NULL,
      b232 REAL NOT NULL,
      b233 REAL NOT NULL,
      b234 REAL NOT NULL,
      b235 REAL NOT NULL,
      b236 REAL NOT NULL,
      b237 REAL NOT NULL,
      b238 REAL NOT NULL,
      b239 REAL NOT NULL,
      b240 REAL NOT NULL,
      b241 REAL NOT NULL,
      b242 REAL NOT NULL,
      b243 REAL NOT NULL,
      b244 REAL NOT NULL,
      b245 REAL NOT NULL,
      b246 REAL NOT NULL,
      b247 REAL NOT NULL,
      b248 REAL NOT NULL,
      b249 REAL NOT NULL,
      b250 REAL NOT NULL,
      b251 REAL NOT NULL,
      b252 REAL NOT NULL,
      b253 REAL NOT NULL,
      b254 REAL NOT NULL,
      b255 REAL NOT NULL,
      b256 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB03 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

