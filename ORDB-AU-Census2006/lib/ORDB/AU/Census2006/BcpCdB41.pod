=head1 NAME

ORDB::AU::Census2006::BcpCdB41 - ORDB::AU::Census2006 class for the bcp_cd_b41 table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::AU::Census2006'
  my $namespace = ORDB::AU::Census2006::BcpCdB41->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'bcp_cd_b41'
  print ORDB::AU::Census2006::BcpCdB41->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::AU::Census2006::BcpCdB41->load( $region_id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::AU::Census2006::BcpCdB41> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::AU::Census2006::BcpCdB41->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::AU::Census2006::BcpCdB41->select(
      'where region_id > ? order by region_id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
bcp_cd_b41 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b41> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::AU::Census2006::BcpCdB41> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::AU::Census2006::BcpCdB41> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::AU::Census2006::BcpCdB41->iterate( sub {
      print $_->region_id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::AU::Census2006::BcpCdB41->select ) {
      print $_->region_id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::AU::Census2006::BcpCdB41->iterate(
      'order by ?', 'region_id',
      sub {
          print $_->region_id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::AU::Census2006->iterate(
      'select name from bcp_cd_b41 order by region_id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::AU::Census2006::BcpCdB41->count;
  
  # How many objects 
  my $small = ORDB::AU::Census2006::BcpCdB41->count(
      'where region_id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
bcp_cd_b41 table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM bcp_cd_b41> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 region_id

  if ( $object->region_id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The bcp_cd_b41 table was originally created with the
following SQL command.

  CREATE TABLE bcp_cd_b41 (
      region_id INTEGER NOT NULL PRIMARY KEY,
      b5663 REAL NOT NULL,
      b5664 REAL NOT NULL,
      b5665 REAL NOT NULL,
      b5666 REAL NOT NULL,
      b5667 REAL NOT NULL,
      b5668 REAL NOT NULL,
      b5669 REAL NOT NULL,
      b5670 REAL NOT NULL,
      b5671 REAL NOT NULL,
      b5672 REAL NOT NULL,
      b5673 REAL NOT NULL,
      b5674 REAL NOT NULL,
      b5675 REAL NOT NULL,
      b5676 REAL NOT NULL,
      b5677 REAL NOT NULL,
      b5678 REAL NOT NULL,
      b5679 REAL NOT NULL,
      b5680 REAL NOT NULL,
      b5681 REAL NOT NULL,
      b5682 REAL NOT NULL,
      b5683 REAL NOT NULL,
      b5684 REAL NOT NULL,
      b5685 REAL NOT NULL,
      b5686 REAL NOT NULL,
      b5687 REAL NOT NULL,
      b5688 REAL NOT NULL,
      b5689 REAL NOT NULL,
      b5690 REAL NOT NULL,
      b5691 REAL NOT NULL,
      b5692 REAL NOT NULL,
      b5693 REAL NOT NULL,
      b5694 REAL NOT NULL,
      b5695 REAL NOT NULL,
      b5696 REAL NOT NULL,
      b5697 REAL NOT NULL,
      b5698 REAL NOT NULL,
      b5699 REAL NOT NULL,
      b5700 REAL NOT NULL,
      b5701 REAL NOT NULL,
      b5702 REAL NOT NULL,
      b5703 REAL NOT NULL,
      b5704 REAL NOT NULL,
      b5705 REAL NOT NULL,
      b5706 REAL NOT NULL,
      b5707 REAL NOT NULL,
      b5708 REAL NOT NULL,
      b5709 REAL NOT NULL,
      b5710 REAL NOT NULL,
      b5711 REAL NOT NULL,
      b5712 REAL NOT NULL,
      b5713 REAL NOT NULL,
      b5714 REAL NOT NULL,
      b5715 REAL NOT NULL,
      b5716 REAL NOT NULL,
      b5717 REAL NOT NULL,
      b5718 REAL NOT NULL,
      b5719 REAL NOT NULL,
      b5720 REAL NOT NULL,
      b5721 REAL NOT NULL,
      b5722 REAL NOT NULL,
      b5723 REAL NOT NULL,
      b5724 REAL NOT NULL,
      b5725 REAL NOT NULL,
      b5726 REAL NOT NULL,
      b5727 REAL NOT NULL,
      b5728 REAL NOT NULL,
      b5729 REAL NOT NULL,
      b5730 REAL NOT NULL,
      b5731 REAL NOT NULL,
      b5732 REAL NOT NULL,
      b5733 REAL NOT NULL,
      b5734 REAL NOT NULL,
      b5735 REAL NOT NULL,
      b5736 REAL NOT NULL,
      b5737 REAL NOT NULL,
      b5738 REAL NOT NULL,
      b5739 REAL NOT NULL,
      b5740 REAL NOT NULL,
      b5741 REAL NOT NULL,
      b5742 REAL NOT NULL,
      b5743 REAL NOT NULL,
      b5744 REAL NOT NULL,
      b5745 REAL NOT NULL,
      b5746 REAL NOT NULL,
      b5747 REAL NOT NULL,
      b5748 REAL NOT NULL,
      b5749 REAL NOT NULL,
      b5750 REAL NOT NULL,
      b5751 REAL NOT NULL,
      b5752 REAL NOT NULL,
      b5753 REAL NOT NULL,
      b5754 REAL NOT NULL,
      b5755 REAL NOT NULL,
      b5756 REAL NOT NULL,
      b5757 REAL NOT NULL,
      b5758 REAL NOT NULL,
      b5759 REAL NOT NULL,
      b5760 REAL NOT NULL,
      b5761 REAL NOT NULL,
      b5762 REAL NOT NULL,
      b5763 REAL NOT NULL,
      b5764 REAL NOT NULL,
      b5765 REAL NOT NULL,
      b5766 REAL NOT NULL,
      b5767 REAL NOT NULL,
      b5768 REAL NOT NULL,
      b5769 REAL NOT NULL,
      b5770 REAL NOT NULL,
      b5771 REAL NOT NULL,
      b5772 REAL NOT NULL,
      b5773 REAL NOT NULL,
      b5774 REAL NOT NULL,
      b5775 REAL NOT NULL,
      b5776 REAL NOT NULL,
      b5777 REAL NOT NULL,
      b5778 REAL NOT NULL,
      b5779 REAL NOT NULL,
      b5780 REAL NOT NULL,
      b5781 REAL NOT NULL,
      b5782 REAL NOT NULL,
      b5783 REAL NOT NULL,
      b5784 REAL NOT NULL,
      b5785 REAL NOT NULL,
      b5786 REAL NOT NULL,
      b5787 REAL NOT NULL,
      b5788 REAL NOT NULL,
      b5789 REAL NOT NULL,
      b5790 REAL NOT NULL,
      b5791 REAL NOT NULL,
      b5792 REAL NOT NULL,
      b5793 REAL NOT NULL,
      b5794 REAL NOT NULL,
      b5795 REAL NOT NULL,
      b5796 REAL NOT NULL,
      b5797 REAL NOT NULL,
      b5798 REAL NOT NULL,
      b5799 REAL NOT NULL,
      b5800 REAL NOT NULL,
      b5801 REAL NOT NULL,
      b5802 REAL NOT NULL,
      b5803 REAL NOT NULL,
      b5804 REAL NOT NULL,
      b5805 REAL NOT NULL,
      b5806 REAL NOT NULL,
      b5807 REAL NOT NULL,
      b5808 REAL NOT NULL,
      b5809 REAL NOT NULL,
      b5810 REAL NOT NULL,
      b5811 REAL NOT NULL,
      b5812 REAL NOT NULL,
      b5813 REAL NOT NULL,
      b5814 REAL NOT NULL,
      b5815 REAL NOT NULL,
      b5816 REAL NOT NULL,
      b5817 REAL NOT NULL,
      b5818 REAL NOT NULL,
      b5819 REAL NOT NULL,
      b5820 REAL NOT NULL,
      b5821 REAL NOT NULL,
      b5822 REAL NOT NULL,
      b5823 REAL NOT NULL,
      b5824 REAL NOT NULL,
      b5825 REAL NOT NULL,
      b5826 REAL NOT NULL,
      b5827 REAL NOT NULL,
      b5828 REAL NOT NULL,
      b5829 REAL NOT NULL,
      b5830 REAL NOT NULL,
      b5831 REAL NOT NULL,
      b5832 REAL NOT NULL,
      b5833 REAL NOT NULL,
      b5834 REAL NOT NULL,
      b5835 REAL NOT NULL,
      b5836 REAL NOT NULL,
      b5837 REAL NOT NULL,
      b5838 REAL NOT NULL,
      b5839 REAL NOT NULL,
      b5840 REAL NOT NULL,
      b5841 REAL NOT NULL,
      b5842 REAL NOT NULL,
      b5843 REAL NOT NULL,
      b5844 REAL NOT NULL,
      b5845 REAL NOT NULL,
      b5846 REAL NOT NULL,
      b5847 REAL NOT NULL,
      b5848 REAL NOT NULL,
      b5849 REAL NOT NULL,
      b5850 REAL NOT NULL,
      b5851 REAL NOT NULL,
      b5852 REAL NOT NULL,
      b5853 REAL NOT NULL,
      b5854 REAL NOT NULL,
      b5855 REAL NOT NULL,
      b5856 REAL NOT NULL,
      b5857 REAL NOT NULL,
      b5858 REAL NOT NULL,
      b5859 REAL NOT NULL,
      b5860 REAL NOT NULL,
      b5861 REAL NOT NULL,
      b5862 REAL NOT NULL,
      b5863 REAL NOT NULL,
      b5864 REAL NOT NULL,
      b5865 REAL NOT NULL,
      b5866 REAL NOT NULL,
      b5867 REAL NOT NULL,
      b5868 REAL NOT NULL,
      b5869 REAL NOT NULL,
      b5870 REAL NOT NULL,
      b5871 REAL NOT NULL,
      b5872 REAL NOT NULL,
      b5873 REAL NOT NULL,
      b5874 REAL NOT NULL,
      b5875 REAL NOT NULL,
      b5876 REAL NOT NULL,
      b5877 REAL NOT NULL,
      b5878 REAL NOT NULL,
      b5879 REAL NOT NULL,
      b5880 REAL NOT NULL,
      b5881 REAL NOT NULL,
      b5882 REAL NOT NULL,
      b5883 REAL NOT NULL,
      b5884 REAL NOT NULL,
      b5885 REAL NOT NULL,
      b5886 REAL NOT NULL,
      b5887 REAL NOT NULL,
      b5888 REAL NOT NULL,
      b5889 REAL NOT NULL,
      b5890 REAL NOT NULL,
      b5891 REAL NOT NULL,
      b5892 REAL NOT NULL,
      b5893 REAL NOT NULL,
      b5894 REAL NOT NULL,
      b5895 REAL NOT NULL,
      b5896 REAL NOT NULL,
      b5897 REAL NOT NULL,
      b5898 REAL NOT NULL,
      b5899 REAL NOT NULL,
      b5900 REAL NOT NULL,
      b5901 REAL NOT NULL,
      b5902 REAL NOT NULL,
      b5903 REAL NOT NULL,
      b5904 REAL NOT NULL,
      b5905 REAL NOT NULL,
      b5906 REAL NOT NULL,
      b5907 REAL NOT NULL,
      b5908 REAL NOT NULL,
      b5909 REAL NOT NULL,
      b5910 REAL NOT NULL,
      b5911 REAL NOT NULL,
      b5912 REAL NOT NULL,
      b5913 REAL NOT NULL,
      b5914 REAL NOT NULL,
      b5915 REAL NOT NULL,
      b5916 REAL NOT NULL,
      b5917 REAL NOT NULL,
      b5918 REAL NOT NULL,
      b5919 REAL NOT NULL,
      b5920 REAL NOT NULL,
      b5921 REAL NOT NULL,
      b5922 REAL NOT NULL,
      b5923 REAL NOT NULL,
      b5924 REAL NOT NULL,
      b5925 REAL NOT NULL,
      b5926 REAL NOT NULL,
      b5927 REAL NOT NULL,
      b5928 REAL NOT NULL,
      b5929 REAL NOT NULL,
      b5930 REAL NOT NULL,
      b5931 REAL NOT NULL,
      b5932 REAL NOT NULL,
      b5933 REAL NOT NULL,
      b5934 REAL NOT NULL,
      b5935 REAL NOT NULL,
      b5936 REAL NOT NULL,
      b5937 REAL NOT NULL,
      b5938 REAL NOT NULL,
      b5939 REAL NOT NULL,
      b5940 REAL NOT NULL,
      b5941 REAL NOT NULL,
      b5942 REAL NOT NULL,
      b5943 REAL NOT NULL,
      b5944 REAL NOT NULL,
      b5945 REAL NOT NULL,
      b5946 REAL NOT NULL,
      b5947 REAL NOT NULL,
      b5948 REAL NOT NULL,
      b5949 REAL NOT NULL,
      b5950 REAL NOT NULL,
      b5951 REAL NOT NULL,
      b5952 REAL NOT NULL,
      b5953 REAL NOT NULL,
      b5954 REAL NOT NULL,
      b5955 REAL NOT NULL,
      b5956 REAL NOT NULL,
      b5957 REAL NOT NULL,
      b5958 REAL NOT NULL,
      b5959 REAL NOT NULL,
      b5960 REAL NOT NULL,
      b5961 REAL NOT NULL,
      b5962 REAL NOT NULL,
      b5963 REAL NOT NULL,
      b5964 REAL NOT NULL,
      b5965 REAL NOT NULL,
      b5966 REAL NOT NULL,
      b5967 REAL NOT NULL,
      b5968 REAL NOT NULL,
      b5969 REAL NOT NULL,
      b5970 REAL NOT NULL,
      b5971 REAL NOT NULL,
      b5972 REAL NOT NULL,
      b5973 REAL NOT NULL,
      b5974 REAL NOT NULL,
      b5975 REAL NOT NULL,
      b5976 REAL NOT NULL,
      b5977 REAL NOT NULL,
      b5978 REAL NOT NULL,
      b5979 REAL NOT NULL,
      b5980 REAL NOT NULL,
      b5981 REAL NOT NULL,
      b5982 REAL NOT NULL,
      b5983 REAL NOT NULL,
      b5984 REAL NOT NULL,
      b5985 REAL NOT NULL,
      b5986 REAL NOT NULL,
      b5987 REAL NOT NULL,
      b5988 REAL NOT NULL,
      b5989 REAL NOT NULL,
      b5990 REAL NOT NULL,
      b5991 REAL NOT NULL,
      b5992 REAL NOT NULL,
      b5993 REAL NOT NULL,
      b5994 REAL NOT NULL,
      b5995 REAL NOT NULL,
      b5996 REAL NOT NULL,
      b5997 REAL NOT NULL,
      b5998 REAL NOT NULL,
      b5999 REAL NOT NULL,
      b6000 REAL NOT NULL,
      b6001 REAL NOT NULL,
      b6002 REAL NOT NULL,
      b6003 REAL NOT NULL,
      b6004 REAL NOT NULL,
      b6005 REAL NOT NULL,
      b6006 REAL NOT NULL,
      b6007 REAL NOT NULL,
      b6008 REAL NOT NULL,
      b6009 REAL NOT NULL,
      b6010 REAL NOT NULL,
      b6011 REAL NOT NULL,
      b6012 REAL NOT NULL,
      b6013 REAL NOT NULL,
      b6014 REAL NOT NULL,
      b6015 REAL NOT NULL,
      b6016 REAL NOT NULL,
      b6017 REAL NOT NULL,
      b6018 REAL NOT NULL,
      b6019 REAL NOT NULL,
      b6020 REAL NOT NULL,
      b6021 REAL NOT NULL,
      b6022 REAL NOT NULL
  )

=head1 SUPPORT

ORDB::AU::Census2006::BcpCdB41 is part of the L<ORDB::AU::Census2006> API.

See the documentation for L<ORDB::AU::Census2006> for more information.

=head1 AUTHOR

AdamKennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 AdamKennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

