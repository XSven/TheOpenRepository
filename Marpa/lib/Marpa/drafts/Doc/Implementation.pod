=head1 NAME

Marpa::API::Implementation - Marpa Implementation

=head1 OVERVIEW

This document describes implementation details of
Marpa, in particular those data structure which
are useful to users who need to
trace and debug
their grammar.
It assumes that the reader
has read the other Marpa API documentation,
and that she
has a general knowledge of parsing.
All the examples of diagnostic output
in this document
assume that
the C<strip> Marpa option has been turned off.

=head1 EARLEY SETS

To speak pedantically, the algorithm in
L<Earley's 1970 parsing article|Marpa::Doc::Bibliography/"Earley 1970">
does not actually parse in the strict sense.
It is a recognizer, not a parser.

B<Earley items> are built as tokens are recognized.
If an Earley item of the correct form is built when
all of an input has been processed,
that input is recognized as one of those described by the grammar.
Once the recognition phase is done,
the phase that does parsing in the strict sense uses
the Earley items.

Every Earley item has a B<current earleme>.
An Earley item's current earleme is also called its B<dot earleme>,
its current location, or its dot location.
The set of all the Earley items with the same dot location,
is called an B<Earley set>.

In addition to its B<current earleme>,
each Earley item has a B<QDFA state>, and an B<origin>.
The origin of an Earley item can also be called its B<start location>.
Here's a representation of an Earley item, as you might see it in
debugging output from Marpa:

=begin Marpa::Test::Display:

## skip display

=end Marpa::Test::Display:

    S5@6-7

This Earley item is for QDFA state 5 (that is the "C<S5>" part),
The "C<@6-7>" part says that this Earley item
originates at earleme 6, and is current at earleme 7.
The number of an Earley item's current, or dot, earleme is always
the same as number of the Earley set that contains the item.

(Note to experts:
Those familiar with Earley parsing will note that C<S5@6-7> does not look like
a traditional Earley item.
QDFA states are not traditional --
they are my elaboration of an invention by Aycock and Horspool.
The use of the at-sign as punctuation follows
L<Grune and Jacobs|Marpa::Doc::Bibliography/"Grune and Jacobs 2008">.
Finally, in the traditional notation for an Earley item,
the dot earleme is not
included at all --
you were supposed to figure out from the context
which Earley set an Earley item belongs to.)

=head1 QDFA STATES

I will mention QDFA's (Quasi-Deterministic Finite Automata) frequently
and NFA's (Non-deterministic Finite Automata) sometimes.
All you need to know about NFA's
is that the QDFA's are built from them.
NFA state numbers sometimes appear in the diagnostic outputs.
They can be ignored.

About QDFA's, it will be necessary to know more.
Let's start with an example of another Earley item:

=begin Marpa::Test::Display:

## skip display

=end Marpa::Test::Display:

    S1@2-2

This states that this item is for QDFA state 1;
that it originates at earleme 2;
and that it is currently at
(or has its dot position at)
earleme 2.
We can get a description of the QDFA states with the C<show_QDFA> method.
Here's what it says about QDFA state 1:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S1: predict; 1,5
    e -> . e op e
    e -> . number
     <e> => S3
     <number> => S4

For those who like the big picture,
or who simply like to skim ahead,
the entire C<show_QDFA> output,
along with the other
trace and debugging outputs for this example,
is in the appendices.

The first line of C<show_QDFA>'s description
of QDFA state 1 begins with its name: C<S1>.
Next comes the C<predict> tag.
That indicates this item was created by a prediction.
That's one of the four ways an Earley item can be created.
There's more on that below.

The two numbers after the "C<predict>" tag on the first line 
may be ignored.
They are the numbers of the NFA states that were combined into this QDFA state.
Marpa uses QDFA states to track the parse.
Every QDFA state has one or more LR(0) items.
In this example, the second and third lines are LR(0) items.
B<LR(0) items> are rules with a dot added to indicate
how far recognition has proceeded into the rule.

A dot between two symbols indicates that all symbols
before the dot
have been recognized,
but that none of the symbols after the dot have been recognized.
A dot at the beginning of an LR(0) item
indicates that none of its symbols have yet been recognized.
A dot at the end indicates that the rule is B<complete>
-- all of its symbols have been recognized.

The location of the dot is called the B<dot position>.
The symbol before the dot position in an LR(0) item is called the B<pre-dot symbol>.
The symbol after the dot position in an LR(0) item is called the B<post-dot symbol>.

The last two lines in the display show transitions.
The first line says that, on seeing an C<e>, you transition to QDFA state 3.
The second states that, on seeing a C<number>, you transition to QDFA state 4.

It's important not to confuse Earley items with LR(0) items.
Earley items are built from one or more LR(0) items.
In traditional Earley parsing, each Earley item contained one and only one LR(0) item.
This made the internals simpler, but was not as efficient.
Marpa combines LR(0) items into QDFA states
based on ideas in L<Aycock and Horspool 2002|Marpa::Doc::Bibliography/"Aycock and Horspool 2002">.

Every LR(0) item is a statement that a rule
has been recognized as far as the dot position.
The dot can be at the beginning of the rule in an LR(0) item,
indicating that the part of the rule recognized so far is zero length.
An LR(0) item with the dot at the beginning of the rule is a prediction
that the rule might be recognized.

Every QDFA state contain one or more LR(0) items
and is therefore a set of statements about rule recognition.
An Earley item is present in the Earley sets if and only if
every rule in every LR(0) item in the QDFA state of the Earley item has
been recognized as far as its dot position.

Earley items fix the location in the earleme stream where
LR(0) items begin and end.
Recognition of each LR(0) item began at the origin of the Earley item,
and ended at the dot location of the Earley item.
Put another way,
the origin of each LR(0) item corresponds to the origin of the Earley item,
and the dot position of each LR(0) item corresponds
to the dot location of the Earley item.

Some LR(0) items are predictions --
statements that their rules could start
at the dot location of the Earley item.
In predictions,
no symbols have been recognized, and
the origin and the dot location of the Earley item will be the same.
Our example is a prediction -- both
origin and dot location are at earleme 2.
We can see that that is the case
from the "C<2-2>" in the description of Earley item C<S1@2-2>.

=head1 HOW EARLEY SETS ARE BUILT

New items come into the Earley sets in four ways:
scanning, completion, prediction, and initialization.

=head2 Scanning

Scanning adds Earley items to indicate which tokens have been seen in the
input, and where.
Suppose the Earley item S1@2-2 (mentioned above) is present at earleme 2.
Marpa knows to instruct the lexer to look for a C<number> token because
there is a transition from S1 to S4 on C<number>.

If the lexer finds a C<number> token with a length
(in earlemes) of 1 at earleme 2,
a new Earley item S4@2-3 is added at earleme 3.
(Earleme 3 because 3 is 2+1, the current token plus the token length.)

Here (again from C<show_QDFA>) is the description of QDFA state 4:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S4: 6
    e -> number .

We can see that there is only one LR(0) item in QDFA state 4,
and that it has the dot pointer at the end of its rule.
An LR(0) item with
the dot pointer at the end of its rule is
a B<completed rule>.

Marpa calls the item that was looking for the scanned symbol,
the B<predecessor> of the item added by the scan.
In this example, S1@2-2 is the predecessor of S4@2-3.
Any item which is added to an Earley set based on a QDFA state transition
from a predecessor,
is called that predecessor's B<successor>.
In this example, S4@2-3 is the successor of S1@2-2.

=head3 An Example

Here's what S4@2-3 looks like in the Earley sets, after a successful
scan of the input C<"2+2">.

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_earley_sets.out');

=end Marpa::Test::Display:

    S4@2-3  [p=S1@2-2; s=number; t=\'2']

After the name of the Earley item is an
B<Earley item source choice>, shown in brackets.
When the context makes the
meaning clear, an B<Earley item source choice>
may be called a B<source> or a B<source choice>.
This parse is not ambiguous,
so all Earley items have at most one source choice entry.

In this case the source choice entry is for a B<token choice>.
Token choices are shown as C<[p=>I<predecessor>C<; t=>I<token_value>C<]> pairs.
In the above example, the token choice
C<[p=S1@2-2; s=number; t=\'2']>
indicates that the token has a value of "2",
and that, when this token choice is selected,
the predecessor of S4@2-3 is S1@2-2.

=head2 Completion

Whenever an Earley item with a completed rule is added to an Earley set,
other Earley items may be added to that Earley set as a result.
The item with the completed rule is called the B<completion>,
or the B<cause>,
and any new item added as a result is called an B<effect>.

Let's look at one example of a completion "cause and effect".
As the completion in our example,
we'll use S4@2-3,
the Earley item in our example of a scanned item.
Its state was QDFA state 4.
QDFA state 4 contained the LR(0) item 

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    e -> number .

The dot is at the far right, so it's a completed rule whose the left hand side is C<e>.

S4@2-3 begins at earleme 2 and has a complete rule with C<e> as its lhs,
and therefore any Earley item which is looking for an C<e>
beginning at earleme 2 is in luck.
S5@0-2 is such a rule.  QDFA state 5 looks like this:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S5: 3
    e -> e op . e
     <e> => S6

This says that in QDFA state 5, when you see an C<e>, you transition to
QDFA state 6.
Here's S6@0-3, the item which is the effect of the completion:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_earley_sets.out');

=end Marpa::Test::Display:

    S6@0-3 [p=S5@0-2; c=S4@2-3]

For completion items,
the terms predecessor and successor
mean pretty much 
what they did in token scanning.
Since S6@0-3 comes from moving the dot forward in
a rule in S5@0-2, we say S5@0-2 is the B<predecessor> of S6@0-3,
and that 
S6@0-3 is the B<successor> of
S5@0-2.

The same Earley item can be added to the same Earley set for multiple reasons.
A rule can be added
because of one or more scanned tokens;
because of one or more completions;
or because of any combination of these.

Traditionally in Earley's algorithm,
the same item is not added twice.
Where an item comes from is not important in recognition.
But parsing in the strict sense means determining the structure of the input,
and that requires us to know why an Earley item was added to an Earley set.
Each reason for the existence of an Earley item in an Earley set
is a different choice that can be made when it comes time
to create a parse structure.

Marpa uses the Earley item source choices
to track the reasons why Earley items were added.
Aycock and Horspool don't call them source choices.
But Marpa's method is derived from the one Aycock and Horspool describe in
L<their 2002 article|Marpa::Doc::Bibliography/"Aycock and Horspool 2002">.

We've already seen a token source choice in the scanning example.
Earley item S6@0-3 has another example of a source choice: C<[p=S5@0-2; c=S4@2-3]>.
This is another kind of source choice, a B<completion source choice>.
This source choice says that one reason for S6@0-3 to exist
was the completion in S4@2-3,
with S5@0-2 as the predecessor.
Since this parse in unambiguous,
there are no other source choices.

=head2 Prediction

A third source of Earley items is prediction.
Whenever an Earley item is expecting to see an C<e>,
for example, it can also expect to see
the start of all the rules that have an C<e>
on their left hand side.

Recall QDFA state 5:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S5: 3
    e -> e op . e
     <e> => S6

QDFA state 5 is expecting an C<e>.
This means that the rules 

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    e -> . e op e
    e -> . number

can also be expected to originate at this earleme.
Marpa is smart about grouping rules into QDFA states
and both these rules are in QDFA state 1:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S1: predict; 1,5
    e -> . e op e
    e -> . number
     <e> => S3
     <number> => S4

Since S5@0-2 is at earleme 2,
and it is expecting the rules which originate
in QDFA state 1,
there will be an Earley item for QDFA state 1 at earleme 2:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_earley_sets.out');

=end Marpa::Test::Display:

    S1@2-2

In predicted items,
either the dot is at the beginning of the rule,
or else all the symbols to the left of the dot are nulling symbols.
Either way, the origin and dot earlemes will always be the same.

Source choices are not recorded for predicted items.
Predicted items are
essential to get rules started
in the Earley sets.
But they are not actually needed
when the time comes for parsing and evaluation.
That means they don't need source choice entries.

=head2 Initialization

One or two Earley items are put into Earley set 0 to start things off.
In our example, the initial Earley items are

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_earley_sets.out');

=end Marpa::Test::Display:

    S0@0-0
    S1@0-0

QDFA state 0 contains the start rules, with the dot pointer at the beginning.
Only Earley set 0 will contain an Earley item for QDFA state 0.
S1@0-0 contains the rules predicted by S0@0-0.

=head2 Ambiguous Parsing

If a parse is ambiguous,
one or more scans,
one or more completions,
or a combination of scans and completions,
will try to add at least one of the Earley items more than once.
Marpa does not add an Earley item more than once.
Instead of creating a second Earley item with the same QDFA state and
origin at the current earleme,
Marpa adds another source choice to the existing Earley item.

When the time comes to produce parses from the Earley item,
more than one rule may apply.
This is because 
Marpa's Earley items correspond to QDFA states instead of to
a single rule.
Every pairing of a source choice with an applicable rule
is an alternative that can be selected when the choices are made
that produce a parse.
For more detail on how ambiguous parses
are evaluated,
including how Marpa determines which rules are applicable,
see L<the section on creating the parse bocage, below|"THE PARSE BOCAGE">.

=head1 HOW A SUCCESSFUL PARSE IS RECOGNIZED

As mentioned, what's usually called Earley's algorithm is just a recognizer,
an algorithm to build the Earley sets.
The input is recognized successfully if,
at the earleme location designated as the end of parsing,
there is
an Earley item for a completed start rule state.
A B<completed start rule state> is a QDFA state containing a completed start rule.
A B<completed start rule> is the LR(0) item for the start rule that has its
dot position at the end of that rule.

At most two of the QDFA states can be completed start rule states.
One is a special case.
In grammars which allow a null parse,
the start state, QDFA state 0,
is also a completed start rule state.

The other completed start rule state
contains the LR(0) item which has Marpa's internal start rule
with the dot pointer at the end of the rule.
The lhs of the internal start rule is
a special internal start symbol.
The rhs of the internal start rule is
the grammar's original start symbol.
QDFA state 2 is the completed start rule state
for our example parse:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_QDFA.out');

=end Marpa::Test::Display:

    S2: 8
    e['] -> e .

A parse starting at earleme I<S> is successful at earleme I<N> if it
contains an Earley item
for a completed start rule state
with a origin earleme of I<S> and
a dot earleme of I<N>.
Here's the Earley item which makes the parse in our example,
which started at earleme 0,
successful at earleme 3:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/equation_show_earley_sets.out');

=end Marpa::Test::Display:

    S2@0-3 [p=S0@0-0; c=S6@0-3]
      
=head1 GRAMMAR REWRITING

Marpa rewrites grammars,
adding internal symbols and rules in the process.
This rewriting does not affect the semantics,
but it does show up when you examine the internals.

Marpa's internal symbols have B<tags> at the end,
enclosed in square brackets.
This means all Marpa internal symbols end in a right square bracket.

=head2 Adding a Start Rule

Many parsers add their own start rule
and their own start symbol
to grammars.
Marpa is no exception.
The new start symbol is the old one with "C<[']>" suffixed.
We saw a Marpa internal start symbol above: C<e[']>.
If the grammar allows a null parse, there will also be a nulling
start symbol, with "C<['][]>" suffixed.

=head2 Elminating Proper Nullable Symbols

Nulling symbols are those which I<always> produce the empty sentence.
Nullable symbols are those which I<sometimes> produce the empty sentence.
Non-nullable symbols are those which I<never> produce the empty sentence.

Pedantically, all nulling symbols are also nullable symbols.
A B<proper nullable> is any nullable symbol which is not a nulling symbol.
In other words,
a proper nullable is a symbol that
can produce either the empty sentence or a non-empty sentence.

Nullable symbols were a problem in previous versions of Earley parsers.
L<Aycock and Horspool 2002|Marpa::Doc::Bibliography/"Aycock and Horspool 2002">
outlined a new approach for dealing with them.
I use their ideas with modifications of my own.

Marpa rewrites its grammar to eliminate proper nullables.
It does this by turning every proper nullable into two symbols:
a non-nullable variant and a nulling variant.
The non-nullable variant keeps the original symbol's name,
but is no longer allowed to appear in places
where it might be nulled.
The name of the nulling variant
is that of the original symbol with the nulling tag ("C<[]>") suffixed.
When the nulling variant is used,
it must be nulled.

The newly introduced nulling symbols will not appear on any left hand sides,
with one exception:
grammars that allow a null parse
will have a nulling start rule.
Except for the nulling start symbol,
Marpa marks nulling symbols internally and
recognizes them directly,
without the need of empty rules.

Rules with proper nullables on the rhs
have to be replaced with
new rules covering every possible combination of
the non-nullable and nulling variants.
That rewrite is described in the next section.

=head2 CHAF Rewriting

To deal with the splitting of rhs proper nullables into two symbols,
one non-nullable and one nulling,
Aycock and Horspool created new rules covering all possible rhs combinations
of non-nullable and nulling symbols.
This B<factoring> was exponential in the worst case.
I don't like leaving exponential explosions in an algorithm, even unlikely ones.
And I suspect that the generation of all possible combinations
for an arbitrarily long right hand side might be inefficient
in practice.

A result due to Chomsky shows that any grammar can be rewritten
as a grammar with at most two symbols on the right hand side.
Relaxing Chomsky's rewrite to allow right hand sides with any number of symbols,
but at most two proper nullables,
produces a rewrite I call CHAF (Chomsky-Horspool-Aycock Form).

CHAF changes the worst case to linear, and in practical cases lowers
the multiplier.  Here's an example of a CHAF rewrite from Marpa's
own self-grammar.
First, the rule:

=begin Marpa::Test::Display:

## next display
in_file($_, 'bootstrap/self.marpa');

=end Marpa::Test::Display:

    production paragraph:
        non structural production sentences,
        production sentence,
        non structural production sentences,
        optional action sentence,
        non structural production sentences.

This rule contains four proper nullables, reinforcing my fear
that grammars written as test cases won't be the only ones with
lots of proper nullables on the right hand side.
C<non structural production sentences>
and C<optional action sentence> are both
proper nullables and
C<non structural production sentences>
appears three times.

Here's is the output from C<show_rules>, showing what Marpa did with this rule:

=begin Marpa::Test::Display:

## next 4 displays
in_file($_, 'author.t/self_show_rules.out');

=end Marpa::Test::Display:

    11: production-paragraph
	    -> non-structural-production-sentences
	    production-sentence
	    non-structural-production-sentences
	    action-sentence:optional
	    non-structural-production-sentences /* !useful */

Z<>

    94: production-paragraph ->
        non-structural-production-sentences
        production-sentence
        production-paragraph[R11:2][x5b] /* vrhs real=2 */
    95: production-paragraph ->
        non-structural-production-sentences
        production-sentence
        non-structural-production-sentences[]
        action-sentence:optional[]
        non-structural-production-sentences[]
    96: production-paragraph ->
        non-structural-production-sentences[]
        production-sentence
        production-paragraph[R11:2][x5b] /* vrhs real=2 */
    97: production-paragraph ->
        non-structural-production-sentences[]
        production-sentence
        non-structural-production-sentences[]
        action-sentence:optional[]
        non-structural-production-sentences[]

Z<>

    98: production-paragraph[R11:2][x5b] ->
        non-structural-production-sentences
        production-paragraph[R11:3][x5c] /* vlhs vrhs real=1 */
    99: production-paragraph[R11:2][x5b] ->
        non-structural-production-sentences
        action-sentence:optional[]
        non-structural-production-sentences[] /* vlhs real=3 */
    100: production-paragraph[R11:2][x5b] ->
        non-structural-production-sentences[]
        production-paragraph[R11:3][x5c] /* vlhs vrhs real=1 */

Z<>

    101: production-paragraph[R11:3][x5c] ->
        action-sentence:optional
        non-structural-production-sentences /* vlhs real=2 */
    102: production-paragraph[R11:3][x5c] ->
        action-sentence:optional
        non-structural-production-sentences[] /* vlhs real=2 */
    103: production-paragraph[R11:3][x5c] ->
        action-sentence:optional[]
        non-structural-production-sentences /* vlhs real=2 */

Rule 11 is the original rule.  Because Marpa has rewritten it,
the rule is marked C<!useful>, telling later stages in the precomputation to ignore it.
Marpa breaks Rule 11 up into three pieces, each with no more than two proper nullables.
Rules 100 to 103 are the first piece, with the first two symbols from Rule 11.
Rules 104 to 106 are the second, with the 3rd symbol.
Rules 107 to 109 are the third, with the 4th and 5th symbols from Rule 11.

Each piece is B<factored>, so that every combination of nulling and non-nullable symbols is included.
New symbols are introduced to be the left hand sides of the pieces.
The tag "C<[R11:3]>" indicates that this
symbol is the left hand side for the piece of Rule 11 which begins at right hand symbol 3
(the first symbol is symbol 0).
The tags beginning with an "C<x>", like "C<[x5f]>", are arbitrary hex values,
inserted to guarantee that the new symbols are unique.

This rule is a worst case for CHAF, because the last three symbols of the right hand side are all
proper nullables.
That means that the last two pieces of the original rule can be either empty or non-empty,
and therefore that both of the newly created lhs symbols are also proper nullables.

With the CHAF rewrite,
there are now a total of 6 proper nullables:
the original 4 plus the 2 symbols newly created to serve as left hand sides.
This is why, in order to have only 2 proper nullables per piece,
the original rule
needed to be divided into 3 pieces.
The newly created lhs symbols, because they are proper nullables,
need to be split into nulling and non-nullable
variants and factored,
just like the proper nullables in the original rule.

Nonetheless this factoring can be done with 10 rules in CHAF,
while the original Aycock-Horspool factoring (NNF)
required 16.
After more than 4 proper nullables, the advantage of CHAF becomes overwhelming.
With 5 proper nullables, there would be 13 rules for CHAF versus 32 for NNF.
With 6 proper nullables, 16 versus 64.

The user's semantics are preserved, because Marpa, while splitting the rule into
pieces and factoring the pieces,
inserts logic to gather and preserve the values of child nodes.
These values are presented
to the user's actions as if no CHAF rewrite had occurred.

=head2 Converting Sequence Productions to BNF

Internally, Marpa converts productions specified as sequences into BNF productions.
The conversion is done in a standard way.  For example,

=begin Marpa::Test::Display:

## next display
in_file($_, 'bootstrap/self.marpa');

=end Marpa::Test::Display:

    paragraphs: empty line separated paragraph sequence.

becomes

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/self_show_rules.out');

=end Marpa::Test::Display:

    1: paragraphs -> paragraph[Seq:1-*][Sep:empty_line][x5] /* vrhs discard_sep real=0 */
    2: paragraphs -> paragraph[Seq:1-*][Sep:empty_line][x5] empty-line /* vrhs discard_sep real=1 */
    3: paragraph[Seq:1-*][Sep:empty_line][x5] -> paragraph /* vlhs real=1 */
    4: paragraph[Seq:1-*][Sep:empty_line][x5]
        -> paragraph empty-line paragraph[Seq:1-*][Sep:empty_line][x5] /* vlhs vrhs real=2 */

In the added symbol, the tag "C<[Seq:1-*]>" indicates this is a symbol for a sequence
of from 1 to an infinite number of symbols
and the tag "C<[Sep:empty_line]>" that it is
C<empty_line> separated.

Here's another example, this time of a sequence without a separator:

=begin Marpa::Test::Display:

## next display
in_file($_, 'bootstrap/self.marpa');

=end Marpa::Test::Display:

    definition paragraph: definition sequence.

is written as the following BNF:

=begin Marpa::Test::Display:

## next display
in_file($_, 'author.t/self_show_rules.out');

=end Marpa::Test::Display:

    8: definition-paragraph -> definition[Seq:1-*][xa] /* vrhs real=0 */
    9: definition[Seq:1-*][xa] -> definition /* vlhs real=1 */
    10: definition[Seq:1-*][xa]
        -> definition definition[Seq:1-*][xa] /* vlhs vrhs real=1 */

=head1 SELF-TUTORIALS

If you want to investigate internals more on your own,
here are two "self-tutorials",
which should make you pretty much an expert.

First, go through the C<show_earley_sets> output in the appendix.
For each
Earley item in it,
reason out how it
came to be there.

Second, take 
the grammar used in the example and run it on the input text "C<2+2*3>".
While the parse in this document was not ambiguous, the grammar was.
The grammar's ambiguity reveals itself when there is more than one operation in the input string.
Get the C<show_earley_sets> output from any one of the ambiguous parses and reason out how
all of its Earley items came to be.

=head1 APPENDIX: THE EXAMPLE

Below are the code and the trace outputs
for the example used in this
document.

=head2 Code for the example

=for Marpa::Display:
name: Implementation Example
perltidy: '-dcsc -sil=0'

    my $grammar = Marpa::Grammar->new(
        {   start          => 'Expression',
            actions        => 'My_Actions',
            default_action => 'first_arg',
            strip          => 0,
            rules          => [
                { lhs => 'Expression', rhs => [qw/Term/] },
                { lhs => 'Term',       rhs => [qw/Factor/] },
                { lhs => 'Factor',     rhs => [qw/Number/] },
                { lhs => 'Term', rhs => [qw/Term Add Term/], action => 'do_add' },
                {   lhs    => 'Factor',
                    rhs    => [qw/Factor Multiply Factor/],
                    action => 'do_multiply'
                },
            ],
        }
    );

    $grammar->precompute();

    my $recce = Marpa::Recognizer->new( { grammar => $grammar } );

    my @tokens = (
        [ 'Number', 42 ],
        [ 'Multiply', ],
        [ 'Number', 1 ],
        [ 'Add', ],
        [ 'Number', 7 ],
    );

    $recce->tokens( \@tokens );

    sub My_Actions::do_add {
        my ( undef, $t1, undef, $t2 ) = @_;
        return $t1 + $t2;
    }

    sub My_Actions::do_multiply {
        my ( undef, $t1, undef, $t2 ) = @_;
        return $t1 * $t2;
    }

    sub My_Actions::first_arg { shift; return shift; }

    my $value_ref = $recce->value;
    my $value = $value_ref ? ${$value_ref} : 'No Parse';

=for Marpa::Display::End

=head2 C<show_symbols> Output

=for Marpa::Display
name: Synopsis show_symbols Output
remove-display-indent: 1
remove-blank-last-line: 1

    0: Expression, lhs=[0] rhs=[5] terminal
    1: Term, lhs=[1 3] rhs=[0 3] terminal
    2: Factor, lhs=[2 4] rhs=[1 4] terminal
    3: Number, lhs=[] rhs=[2] terminal
    4: Add, lhs=[] rhs=[3] terminal
    5: Multiply, lhs=[] rhs=[4] terminal
    6: Expression['], lhs=[5] rhs=[]

=for Marpa::Display::End

=head2 C<show_rules> Output

=for Marpa::Display
name: Synopsis show_rules Output
remove-display-indent: 1
remove-blank-last-line: 1

    0: Expression -> Term
    1: Term -> Factor
    2: Factor -> Number
    3: Term -> Term Add Term
    4: Factor -> Factor Multiply Factor
    5: Expression['] -> Expression /* vlhs real=1 */

=for Marpa::Display::End

=head2 C<show_QDFA> Output

=for Marpa::Display:
name: Synopsis show_QDFA Output
remove-display-indent: 1
remove-blank-last-line: 1

    Start States: S0; S1
    S0: 15
    Expression['] -> . Expression
     <Expression> => S2
    S1: predict; 1,3,5,7,11
    Expression -> . Term
    Term -> . Factor
    Factor -> . Number
    Term -> . Term Add Term
    Factor -> . Factor Multiply Factor
     <Factor> => S3
     <Number> => S4
     <Term> => S5
    S2: 16
    Expression['] -> Expression .
    S3: 4,12
    Term -> Factor .
    Factor -> Factor . Multiply Factor
     <Multiply> => S6; S7
    S4: 6
    Factor -> Number .
    S5: 2,8
    Expression -> Term .
    Term -> Term . Add Term
     <Add> => S8; S9
    S6: 13
    Factor -> Factor Multiply . Factor
     <Factor> => S10
    S7: predict; 5,11
    Factor -> . Number
    Factor -> . Factor Multiply Factor
     <Factor> => S11
     <Number> => S4
    S8: 9
    Term -> Term Add . Term
     <Term> => S12
    S9: predict; 3,5,7,11
    Term -> . Factor
    Factor -> . Number
    Term -> . Term Add Term
    Factor -> . Factor Multiply Factor
     <Factor> => S3
     <Number> => S4
     <Term> => S13
    S10: 14
    Factor -> Factor Multiply Factor .
    S11: 12
    Factor -> Factor . Multiply Factor
     <Multiply> => S6; S7
    S12: 10
    Term -> Term Add Term .
    S13: 8
    Term -> Term . Add Term
     <Add> => S8; S9

=for Marpa::Display::End

=head2 C<show_earley_sets> Output

=for Marpa::Display:
name: Synopsis show_earley_sets Output
remove-display-indent: 1
remove-blank-last-line: 1

    Last Completed: 5; Furthest: 5
    Earley Set 0
    S0@0-0
    S1@0-0
    Earley Set 1
    S4@0-1 [p=S1@0-0; s=Number; t=\42]
    S3@0-1 [p=S1@0-0; c=S4@0-1]
    S5@0-1 [p=S1@0-0; c=S3@0-1]
    S2@0-1 [p=S0@0-0; c=S5@0-1]
    Earley Set 2
    S6@0-2 [p=S3@0-1; s=Multiply; t=\undef]
    S7@2-2
    Earley Set 3
    S4@2-3 [p=S7@2-2; s=Number; t=\1]
    S10@0-3 [p=S6@0-2; c=S4@2-3]
    S11@2-3 [p=S7@2-2; c=S4@2-3]
    S3@0-3 [p=S1@0-0; c=S10@0-3]
    S5@0-3 [p=S1@0-0; c=S3@0-3]
    S2@0-3 [p=S0@0-0; c=S5@0-3]
    Earley Set 4
    S8@0-4 [p=S5@0-3; s=Add; t=\undef]
    S9@4-4
    Earley Set 5
    S4@4-5 [p=S9@4-4; s=Number; t=\7]
    S3@4-5 [p=S9@4-4; c=S4@4-5]
    S12@0-5 [p=S8@0-4; c=S3@4-5]
    S13@4-5 [p=S9@4-4; c=S3@4-5]
    S5@0-5 [p=S1@0-0; c=S12@0-5]
    S2@0-5 [p=S0@0-0; c=S5@0-5]

=for Marpa::Display::End

=head2 C<trace_values> Output

    NEED NEW OUTPUT HERE 

=head1 LICENSE AND COPYRIGHT

Copyright 2007-2010 Jeffrey Kegler, all rights reserved.
Marpa is free software under the Perl license.
For details see the LICENSE file in the Marpa distribution.

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
