=head1 NAME

Marpa::Doc::How_to_Parse_HTML - How to Parse HTML

=head1 SUMMARY

Deriving the element structure of HTML has been considered
a difficult problem in the past, involving a lot of special
cases and difficult code.
This was particularly the case where the requirement was to
parse not just HTML valid according to one of the standards,
but any document that found on the web that is intended
to be HTML and that might have been intended to be HTML.
This document outlines a straightforward, uncomplicated,
natural and transparent method for extremely liberal parsing
of arbitrary documents in the HTML family of languages.

=head1 PERFECTLY LIBERAL PARSING

L<Marpa::UrHTML> demonstrates this new method of parsing HTML.
It requires a more general and powerful parsing algorithm
than have been used in the past
and leverages L<Marpa>,
a new general BNF parsing package and parsing algorithm.

For L<Marpa::UrHTML> all documents are HTML documents,
with some being better than others.
For documents which conform to one of the HTML specifications,
L<Marpa::UrHTML> finds the structure according to the standard.
For documents which are not strictly conformant,
L<Marpa::UrHTML> tries to find a structure that follows the
intention of the author, and the practices of liberal parsers
of HTML, such as the typical rendering engines.

Even a random non-HTML document
will be parsed.
Typically, most of a random document will be
treated as body text,
with L<Marpa::UrHTML> trying to make sense of
anything in the document that looks like markup.

=head1

The parser aims at producing an
L<Marpa::UrHTML> uses a BNF representation of a simplified grammar for HTML.
L<Marpa::UrHTML> uses a BNF representation of a simplified grammar for HTML.

This simplified grammar expects all elements to have start tags 

Marpa is derived from
the parser
L<described by John Aycock and R.  Nigel Horspool|Marpa::Doc::Bibliography/"Aycock and Horspool 2002">.
Aycock and Horspool combined LR(0)
precomputation
with the general parsing algorithm
L<described by Jay
Earley in 1970|Marpa::Doc::Bibliography/"Earley 1970">.

=head1 The BNF for UrHTML

This grammar is taken directly from the code.
The UrHTML grammar is created directly from this.
The format is one production per line, with a C<::=> symbol to separate the
left hand side symbol from the right hand side symbols.
A final star indicates a sequence of zero or more of the symbol.
(Sequences are directly supported by L<Marpa>,
which optimizes for them.)

=for Marpa::Display
name: UrHTML BNF
normalize-whitespace: 1

    cruft ::= CRUFT
    comment ::= C
    pi ::= PI
    pcdata ::= PCDATA
    SGML_item ::= D
    SGML_item ::= comment
    SGML_item ::= pi
    SGML_flow_item ::= SGML_item
    SGML_flow_item ::= WHITESPACE
    SGML_flow_item ::= cruft
    SGML_flow ::= SGML_flow_item*
    document ::= prolog ELE_html trailer EOF
    prolog ::= SGML_flow
    trailer ::= SGML_flow
    ELE_html ::= S_html Contents_html E_html
    Contents_html ::= SGML_flow ELE_head SGML_flow ELE_body SGML_flow
    ELE_head ::= S_head Contents_head E_head
    Contents_head ::= head_item*
    ELE_body ::= S_body flow E_body
    ELE_table ::= S_table table_flow E_table
    ELE_tbody ::= S_tbody table_section_flow E_tbody
    ELE_tr ::= S_tr table_row_flow E_tr
    ELE_td ::= S_td flow E_td
    flow ::= flow_item*
    flow_item ::= cruft
    flow_item ::= SGML_item
    flow_item ::= ELE_table
    flow_item ::= list_item_element
    flow_item ::= header_element
    flow_item ::= block_element
    flow_item ::= inline_element
    flow_item ::= WHITESPACE
    flow_item ::= CDATA
    flow_item ::= pcdata
    head_item ::= header_element
    head_item ::= cruft
    head_item ::= WHITESPACE
    head_item ::= SGML_item
    inline_flow ::= inline_flow_item*
    inline_flow_item ::= pcdata_flow_item
    inline_flow_item ::= inline_element
    pcdata_flow ::= pcdata_flow_item*
    pcdata_flow_item ::= CDATA
    pcdata_flow_item ::= pcdata
    pcdata_flow_item ::= cruft
    pcdata_flow_item ::= WHITESPACE
    pcdata_flow_item ::= SGML_item
    Contents_select ::= select_flow_item*
    select_flow_item ::= ELE_optgroup
    select_flow_item ::= ELE_option
    select_flow_item ::= SGML_flow_item
    Contents_optgroup ::= optgroup_flow_item*
    optgroup_flow_item ::= ELE_option
    optgroup_flow_item ::= SGML_flow_item
    list_item_flow ::= list_item_flow_item*
    list_item_flow_item ::= cruft
    list_item_flow_item ::= SGML_item
    list_item_flow_item ::= header_element
    list_item_flow_item ::= block_element
    list_item_flow_item ::= inline_element
    list_item_flow_item ::= WHITESPACE
    list_item_flow_item ::= CDATA
    list_item_flow_item ::= pcdata
    Contents_colgroup ::= colgroup_flow_item*
    colgroup_flow_item ::= ELE_col
    colgroup_flow_item ::= SGML_flow_item
    table_row_flow ::= table_row_flow_item*
    table_row_flow_item ::= ELE_th
    table_row_flow_item ::= ELE_td
    table_row_flow_item ::= SGML_flow_item
    table_section_flow ::= table_section_flow_item*
    table_section_flow_item ::= table_row_element
    table_section_flow_item ::= SGML_flow_item
    table_row_element ::= ELE_tr
    table_flow ::= table_flow_item*
    table_flow_item ::= ELE_colgroup
    table_flow_item ::= ELE_thead
    table_flow_item ::= ELE_tfoot
    table_flow_item ::= ELE_tbody
    table_flow_item ::= ELE_caption
    table_flow_item ::= ELE_col
    table_flow_item ::= SGML_flow_item
    empty ::=

=for Marpa::Display::End

=head1 SUPPORT

See the L<support section|Marpa/SUPPORT> in the main module.

=head1 AUTHOR

Jeffrey Kegler

=head1 LICENSE AND COPYRIGHT

Copyright 2007 - 2009 Jeffrey Kegler

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl 5.10.0.

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
