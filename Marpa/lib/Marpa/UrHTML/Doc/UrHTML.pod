=head1 NAME

Marpa::UrHTML - High-level HTML Parser

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 Handler Specs

Handler specs can be either array pointers (short form),
or hash pointers (long form).
The short, array form is the usual form.
The long, hash form can be useful for dealing when
element or class names with unusual characters.

A short (or array) form handler spec is a pointer to
an array of two elements.
The first is a string containing
a CSS-style specification.
The second element is the handler closure.
Here's an example:

    Marpa::UrHTML->new( { handlers => [ 'spacer' => \&delete_spacers ] } );

In this example, the specifier is C<spacer>.
When the specifier is a lowercase bareword,
it's taken as a tag name.
The C<spacer> specification indicates
that the closure should be called on all elements with the C<spacer> tagname.
The above code tells L<Marpa::UrHTML> to delete all C<spacer> elements.
(C<spacer> was a tag to add white space supported by
older versions of the Netscape browser.)

The handler specifications follow CSS B<style>, because it is handy
and likely to be familiar to the user.
The syntax is outlined in detail below, but
the following two rules sum it up:

    Use lowercase except for syntax special to L<Marpa::UrHTML>.
    Simple things work, irrelevant and complicated things don't.

HTML class names can also be in specifiers.  For example

    [ '.zipcode' => \&normalize_zipcode } ]

indicates that the C<normalize_zipcode> subroutine is the handler for
all elements whose class is zipcode.

A dotted pair of lowercase names specifies a handler that applies only
to elements with a specific tag name and class name.
For example,

    [ 'span.zipcode' => \&normalize_zipcode ]

indicates that C<normalize_zipcode> is the handler
for C<span> elements whose class attribute is "C<zipcode>".

As a special case, a handler specifier consisting of just an asterisk
is a wildcard matching all elements.

    [ q{*} => \&normalize_whitespace ]

It is important to remember that HTML elements have
both element and non-element children.
The most conspicuous example of non-element content in an
element is text which occurs directly inside that element.
Other important non-elements are
SGML comments and processing instructions.
L<UrHTML::Marpa> allows the user to specify handlers
for non-elements with pseudo-classes.

As an illustration in the following HTML

    <p>I say<q>hello</q>I don't know why you say<q>goodbye</q></p>

The C<p> element of this example contains two child elements,
both C<q> elements.  It also contains two stretches of non-element
text, both of which begin with the word "C<I>" and end with the word
"C<say>".

L<Marpa::UrHTML> pseudo specifiers use the same syntax
except that lowercase is reserved for CSS pseudo-classes,
none of which 
L<Marpa::UrHTML> supports as of this version.
L<Marpa::UrHTML>'s pseudo-classes must always be specified in upper-case.

L<Marpa::UrHTML>'s initially receives its input as tokens
from L<HTML::Parser>.
The following
L<Marpa::UrHTML>'s pseudo-classes allow handlers to be assigned
to deal with certain
L<HTML::Parser> tokens as they come in:
C<:COMMENT>,
C<:PCDATA>
and C<:PI>.
These pseudo-classes assign handlers for HTML (and SGML) comments,
PCDATA and SGML processing instructions, respectively.

Intuitively, PCDATA is any document text which is not explicitly
marked as literal.
(The name stood for "parsed character data" until some
pedants have pointed out that all characters in an HTML document
are in some sense parsed, so that the name is not in the strictest sense
correct.
The acronym was kept for historical reasons and it is still a good
mnemonic.)
In L<Marpa::UrHTML>,
a PCDATA token is a any token returned as a
C<text> event by L<HTML::Parser>
which has a false C<is_cdata> attribute.
Division of PCDATA text is according to the default behavior 
of L<HTML::Parser>.

The C<:CRUFT> pseudo-class allows a handler to be specified
for tokens which are classed as cruft.
See L<the discussion of cruft later in this document|//"Cruft">.
In the phyiscal document,
non-elements can occur before the html as a B<prolog>,
or after the html, as a B<trailer>.
The C<:PROLOG> and C<:TRAILER> pseudo-classes allow
handlers to be assigned for these.

   Supply pseudo-class examples.

The "top" handler is always the last to be called in any parse.
The "top" of the parse deals with a non-element -- the entire
physical document, including
the prolog, the trailer and the html element.
The default top handler takes the literal values of all of its
children and returns them as text.
It is very often useful for the user
to assign their own top handler.
The user can do this with the
C<:TOP> pseudo-class.

In L<Marpa::UrHTML> handler specifiers,
elements and class names should be all alphanumerics, hyphens
and underscores.
Other characters are reserved for future syntax extensions.
If you need class or tag names with other characters,
you should use the hash form of handler specification,
where arbitrary characters can be put into either a class
or element name, with one restriction:
L<Marpa::UrHTML> currently restricts itself to L<HTML::Parser>'s
default handling of element tag names.
This follows the HTML standards (but B<not> the XML standards)
and treats tag names as case insensitive.

The handler specifiers do not support 

     Precedence?

     Discuss special handling of html, head, body

     Discuss special handling of other elements with virtual start tags

     Casing:
     HTML elements NOT case-sensitive.
     XML elements case-sensitive.
     class names case-sensitive.
     CSS pseudo-classes NOT case-sensitive.

=head1 AUTHOR

Jeffrey Kegler

=head1 BUGS

Please report any bugs or feature requests to
C<bug-marpa at rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Marpa>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

=begin Marpa::Test::Display:

## skip display

=end Marpa::Test::Display:

    perldoc Marpa
    
You can also look for information at:

=over 4

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Marpa>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Marpa>

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Marpa>

=item * Search CPAN

L<http://search.cpan.org/dist/Marpa>

=back

=head1 LICENSE AND COPYRIGHT

Copyright 2007-2009 Jeffrey Kegler, all rights reserved.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl 5.10.0.
