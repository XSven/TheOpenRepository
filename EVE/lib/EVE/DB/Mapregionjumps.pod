=head1 NAME

EVE::DB::Mapregionjumps - EVE::DB class for the mapRegionJumps table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'EVE::DB'
  my $namespace = EVE::DB::Mapregionjumps->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'mapRegionJumps'
  print EVE::DB::Mapregionjumps->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = EVE::DB::Mapregionjumps->load( $fromRegionID );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<EVE::DB::Mapregionjumps> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = EVE::DB::Mapregionjumps->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = EVE::DB::Mapregionjumps->select(
      'where fromRegionID > ? order by fromRegionID',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
mapRegionJumps table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM mapRegionJumps> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<EVE::DB::Mapregionjumps> objects when called in list context, or a
reference to an C<ARRAY> of B<EVE::DB::Mapregionjumps> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  EVE::DB::Mapregionjumps->iterate( sub {
      print $_->fromRegionID . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( EVE::DB::Mapregionjumps->select ) {
      print $_->fromRegionID . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  EVE::DB::Mapregionjumps->iterate(
      'order by ?', 'fromRegionID',
      sub {
          print $_->fromRegionID . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  EVE::DB->iterate(
      'select name from mapRegionJumps order by fromRegionID',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = EVE::DB::Mapregionjumps->count;
  
  # How many objects 
  my $small = EVE::DB::Mapregionjumps->count(
      'where fromRegionID > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
mapRegionJumps table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM mapRegionJumps> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 fromRegionID

  if ( $object->fromRegionID ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The mapRegionJumps table was originally created with the
following SQL command.

  CREATE TABLE "mapRegionJumps" (
      "fromRegionID" int(11) NOT NULL,
      "toRegionID" int(11) NOT NULL,
      PRIMARY KEY ("fromRegionID",
      "toRegionID")
  )

=head1 SUPPORT

EVE::DB::Mapregionjumps is part of the L<EVE::DB> API.

See the documentation for L<EVE::DB> for more information.

=head1 COPYRIGHT

Copyright 2011 .

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

