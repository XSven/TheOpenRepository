=head1 NAME

PITA::POE::SupportServer::Specification - Spec for the POE Support Server

=head1 DESCRIPTION

L<PITA>'s guest driver design for image-based drivers is based on the
following rules about how the image will be launched and run.

=head2 Surrounding Environment

The Support Server's role is to launch and provide supporting services to
emulators.

Each emulator will be executed from the command line, with the actual
command line to run determined in the main part of the driver and
provided to the support server ready to launch.

Any testing data, files, and commands will be provided inside an ISO
image provided as a CD or second hard drive, known as an "injector".
The specification for loading this image will already have been set
as part of the command line to be run.

Once the image has started, an image manager program pre-installed into
each image will take control of the image immediately at startup time.

As soon as it has been started, the image manager will contact the
support server to signal a successful startup. This will be in the
form of a HTTP C< GET / > request to a HTTP server that is part of
the support server.

After loading the test data from the injector inside the image, one of
three named tasks will be done.

=head3 ping

A "ping" instruction will cause the image manager to load, contact the
support server, and then immediately shut down.

The purpose of the ping command is only to verify that the image is a
valid PITA test image, and nothing else.

=head3 discover

In PITA, a testing context is identified by a testing "scheme" name,
and a filesystem path that defines the root of the context.

However, the specification for a the "platform" component of the
testing context is far more complex. Rather than a simple naming scheme,
it is described by a large C<HASH> containing up to 200 key/value pairs,
which  includes the normal items such as architecture but may extend
to additional values such as support for threads, or even individual
compiler optimisations.

As such, it is not realistic or practical for the user to provide any
information about the testing contexts, and so PITA supports auto-discovery
of testing contexts within an image, on the assuption that the image is
valid (previously determined using "ping").

The "discover" instruction will cause the image manager to proceed through
the "ping" sequence, and then to to some processing to determine the 
platform specification, returning it to the support server via a PUT
command.

=head3 test

The "test" instruction is performed on a discovered guest image, and
results in the provision of a software package for testing inside the
injector. The image will launch, test the package, which may or may
not result in additional requests being sent to the support server, and
then on completion the image will PUT the result of the testing to the
support server.

=head2 Functional Requirements

The primary requirement for the Support Server is to execute a command
which starts and monitors the emulator, accepts and records HTTP
requests from the guest image, and tracks timeouts and error conditions
for the image, and then return the information gather during the run
to the caller.

=head3 Launch and monitoring of the emulator

The Support Server will be provided with a pre-compiled command line,
appropriate for the host operating system, which will launch and run
an emulator instance.

The Support Server should execute the command, and observe that it
continues to run, noting any unexpected crash of the emulator. For
cases when the emulator does not shut down correctly, the Support
Server should have the capability to reliably and forcefully shut
down the emulator, preferable elegantly, but if necesary forcefully.

=head3 Detection of the Startup Ping

As mentioned, when the guest image starts, it should issue a HTTP
"GET /" request to the internal IP address of the host. The
Support Server should operate an HTTP server which will accept
the "GET /" request and understand it as a successful startup of
the guest image.

The Support Server should understand that, after a configurable
period of time, that the startup has failed, and should shut down
accordingly.

=head3 Capture of Testing Results

All testing generates results, and since the injector may well be
read-only, it is not a reliably mechanism for extracting the
results.

However, since a requirement of a successful start as that the
guest image issues a simple HTTP GET request, we use HTTP as the
mechanism for extracting the results.

The Support Server will be provided at constructor-time with a
configurable set of file/path names, such as "/results.xml".

As an aside, while initially this will be a single file, in the
future a more complex specification for the files (multiple,
order, compulsory/optional, etc) may be necesary.

The Support Server should accept HTTP PUT messages for these
paths, accepting and storing the files (most likely in memory
initially).

On completion of it's execution run, the files should be
returned to the caller.

Note that the size of the result files may be quite large, and in
the future some amount of protection may be required (in the form of
an upper limit) for protection of the host from runaway or malicious
guests.

=head3 Provision of Supporting Resources

From time to time, the guest image may require additional resources
that they were not provided with originally. Again, they will need to
request these resources from outside the guest image.

For security reasons, access from the guest to the Internet may not
be guarenteed, but access to the Support Server will be.

In the Perl case, the Support Server will need to provide the guest
image with access to a CPAN mirror.

The Support Server should be able to provide, configurably, access
to files within a directory on the host server, via a HTTP subpath.

For example, a L<minicpan> checkout may exist on the host server
at F</var/cache/minicpan/>. This might be accessed via the HTTP
request "GET /cpan/".

All requests to the mirror should be recorded (as the relative
path that will need to be determined to map the GET path to the
file path preferably, but as the GET path otherwise).

As an aside, it may be necesary at a later date to also allow
the Support Server to act as a full web proxy, but won't be
required initially.

=head3 Shutdown and Detection of Failure

The Support Server should have the ability to shut down the server.

The conditions for shutdown are.

1. Receiving the result file (or later, ALL of the files) from
the guest image, plus an optional and configurable timeout,
to give a brief opportunity for the emulator to shut itself down
elegantly.

2. The compulsory, configurable timeout from the initial execution
of the emulator to the reception of the startup GET / request.

3. A compulsory, configurable timeout from the last time ANY HTTP
request was recieved from the guest image.

=head2 General Implementation

The Support Server should be implemented as a L<Process> subclass,
most likely as a L<Process::Storable> subclass (which also
implements the L<Process::Serializable> role.

That is, it should be constructed with C<new>, which should be
storable with L<Storable>, it should use a C<prepare> method to
set up for execution, initialize POE Sessions, validate the
execution environment, and so on. And then it on a C<run> method
it should start the POE kernel, run until completion, and then
following the shutdown of the POE kernel, tidy up the object to
put it into a state that is capable of being put back through
L<Storable> again, with all data inside the one storabled object.

See the documentation for the L<Process> family of modules for
more information.

=head2 Constructor API

As a tentative sample, a notional creation and use of a
PITA::POE::SupportServer object might look as follows.

  my $server = PITA::POE::SupportServer->new(
          execute => [
                  '/usr/bin/qemu',
                  '-snapshot',
                  '-hda',
                  '/var/pita/image/ba312bb13f.img',
                  ],
          http_local_addr => '127.0.0.1',
          http_local_port => 80,
          http_mirrors => {
                  '/cpan' => '/var/cache/minicpan',
                  },
          http_result => '/result.xml',
          http_startup_timeout => 30,
          http_activity_timeout => 3600,
          http_shutdown_timeout => 10,
          ) or die "Failed to create support server";
  
  $server->prepare
          or die "Failed to prepare support server";
  
  $server->run
          or die "Failed to run support server";
  
  my $result_file = $server->http_result('/result.xml')
          or die "Guest Image execution failed";

Although the use of the L<Process> API may look pointless
in this example, it will allow the actual execution to be
done in a seperate Perl instance, on a different CPU, or
even on a different host to the main PITA host process.

=head1 AUTHOR

Adam Kennedy E<lt>adamk@cpan.orgE<gt>

=head1 SEE ALSO

L<PITA>, L<POE>, L<Process>, L<http://ali.as/>

=head1 COPYRIGHT

Copyright 2006 Adam Kennedy. All rights reserved.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

=cut
